//
//     Generated by class-dump 3.4 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark -

//
// File: /System/Library/PrivateFrameworks/SoftwareUpdate.framework/Versions/A/SoftwareUpdate
// UUID: A24BDCFF-6164-3028-8892-D3C00B7C5658
//
//                           Arch: x86_64
//                Current version: 574.0.0
//          Compatibility version: 1.0.0
//                 Source version: 574.0.0.0.0
//       Minimum Mac OS X version: 10.9.0
//                    SDK version: 10.9.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
- (NSString *)description;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(Protocol *)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (struct _NSZone *)zone;
- (id)self;
- (Class)class;
- (Class)superclass;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;

@optional
- (NSString *)debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (BOOL)supportsSecureCoding;
@end

@protocol NSURLConnectionDelegate <NSObject>

@optional
- (void)connection:(NSURLConnection *)arg1 didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg2;
- (void)connection:(NSURLConnection *)arg1 didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg2;
- (BOOL)connection:(NSURLConnection *)arg1 canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace *)arg2;
- (void)connection:(NSURLConnection *)arg1 willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg2;
- (BOOL)connectionShouldUseCredentialStorage:(NSURLConnection *)arg1;
- (void)connection:(NSURLConnection *)arg1 didFailWithError:(NSError *)arg2;
@end

@protocol NSURLDownloadDelegate <NSObject>

@optional
- (void)download:(NSURLDownload *)arg1 didFailWithError:(NSError *)arg2;
- (void)downloadDidFinish:(NSURLDownload *)arg1;
- (void)download:(NSURLDownload *)arg1 didCreateDestination:(NSString *)arg2;
- (void)download:(NSURLDownload *)arg1 decideDestinationWithSuggestedFilename:(NSString *)arg2;
- (BOOL)download:(NSURLDownload *)arg1 shouldDecodeSourceDataOfMIMEType:(NSString *)arg2;
- (void)download:(NSURLDownload *)arg1 didReceiveDataOfLength:(unsigned long long)arg2;
- (void)download:(NSURLDownload *)arg1 willResumeWithResponse:(NSURLResponse *)arg2 fromByte:(long long)arg3;
- (void)download:(NSURLDownload *)arg1 didReceiveResponse:(NSURLResponse *)arg2;
- (BOOL)downloadShouldUseCredentialStorage:(NSURLDownload *)arg1;
- (void)download:(NSURLDownload *)arg1 didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg2;
- (void)download:(NSURLDownload *)arg1 didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg2;
- (BOOL)download:(NSURLDownload *)arg1 canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace *)arg2;
- (NSURLRequest *)download:(NSURLDownload *)arg1 willSendRequest:(NSURLRequest *)arg2 redirectResponse:(NSURLResponse *)arg3;
- (void)downloadDidBegin:(NSURLDownload *)arg1;
@end

@protocol NSXPCListenerDelegate <NSObject>

@optional
- (BOOL)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;
@end

@protocol PKPackageSource
- (NSArray *)allPackageReferences;

@optional
- (NSArray *)packageReferencesMatchingIdentifier:(NSString *)arg1 version:(NSString *)arg2;
@end

@protocol PKURLAuthenticationHandler
- (void)promptForAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg1;
@end

@protocol SUHelperDProtocol
- (BOOL)commitLoginCredentials;
- (BOOL)stashLoginCredentialsEnablingFLO:(BOOL)arg1 darkModeIsEnabled:(BOOL)arg2;
- (BOOL)restoreDefaultCatalog;
- (BOOL)setAppStoreAutoUpdate:(BOOL)arg1;
- (BOOL)clearCriticalUpdateNotificationDate;
- (BOOL)removeUpdatesAvailableCookie;
- (BOOL)createUpdatesAvailableCookie;
- (BOOL)updateAnyUserPreferences;
- (BOOL)clearAnyUserPreference:(NSString *)arg1;
- (BOOL)setObject:(id)arg1 forAnyUserPreference:(NSString *)arg2;
- (BOOL)getDigest:(id *)arg1 forPackageAtURL:(NSURL *)arg2;
- (BOOL)removeProductDirectoryForKey:(NSString *)arg1;
- (BOOL)createDirectoryForProductKey:(NSString *)arg1;
- (BOOL)removeDistForProductKey:(NSString *)arg1 withFilename:(NSString *)arg2;
- (BOOL)writeUpdatesIndex:(NSDictionary *)arg1;
- (NSDictionary *)readUpdatesIndex;
- (BOOL)removeIndexFromUpdates;
- (BOOL)movePPDVersionCacheToUpdatesFromPath:(NSString *)arg1;
- (BOOL)moveMetadataCacheToUpdatesFromPath:(NSString *)arg1;
- (BOOL)removeMetadataCacheFromUpdates;
- (BOOL)moveInstalledPrintersToLibraryFromPath:(NSString *)arg1;
- (BOOL)makeQueues;
- (BOOL)registerProductFile:(NSString *)arg1 forProductKey:(NSString *)arg2 trustLevel:(int *)arg3 keepOriginal:(BOOL)arg4;
- (int)prepareForLogoutAndInstall;
- (void)authorizeTool:(struct AuthorizationOpaqueRef *)arg1 forRights:(long long)arg2;
@end

@protocol SUUpdateClient <NSObject>
- (void)installStateDidChange:(SUUpdateStatus *)arg1 forUpdateWithProductKey:(NSString *)arg2;
- (void)availableUpdatesDidChange;
@end

@protocol SUUpdateService <NSObject>
- (void)resetServiceWithReply:(void (^)(void))arg1;
- (void)dumpServiceDebugInfo;
- (void)combinedStatusForUpdatesWithProductKeys:(NSArray *)arg1 reply:(void (^)(SUUpdateStatus *, NSDictionary *))arg2;
- (void)statusForUpdateWithProductKey:(NSString *)arg1 reply:(void (^)(SUUpdateStatus *))arg2;
- (void)takeRequestsToInstallAfterPostLogoutUpdatesWithReply:(void (^)(NSArray *))arg1;
- (void)registerRequestsToInstallAfterPostLogoutUpdates:(NSArray *)arg1 reply:(void (^)(NSError *))arg2;
- (void)stringRepresentationOfLongDescriptionForProductKey:(NSString *)arg1 reply:(void (^)(NSString *))arg2;
- (void)commitLoginCredentials:(void (^)(BOOL))arg1;
- (void)stashLoginCredentialsEnablingFLO:(BOOL)arg1 darkModeIsEnabled:(BOOL)arg2 reply:(void (^)(BOOL))arg3;
- (void)productKeysToAutomaticallyInstallLaterWithReply:(void (^)(NSArray *))arg1;
- (void)setAutomaticallyInstallLater:(BOOL)arg1 forProductKeys:(NSArray *)arg2 replyWhenDone:(void (^)(NSArray *, NSError *))arg3;
- (void)adoptManualProductArchiveByReadingFromFileHandle:(NSFileHandle *)arg1 archiveName:(NSString *)arg2 displayName:(NSString *)arg3 displayVersion:(NSString *)arg4 allowDevSigning:(BOOL)arg5 replyWithResult:(void (^)(NSError *))arg6;
- (void)productKeysToInstallAfterLogoutWithReply:(void (^)(NSArray *))arg1;
- (void)registerToInstallAfterLogoutForProductKeys:(NSArray *)arg1 nowIsLater:(BOOL)arg2 restartNow:(BOOL)arg3 reply:(void (^)(NSArray *))arg4;
- (void)cancelUpdatesForProductKeys:(NSArray *)arg1 reply:(void (^)(NSArray *))arg2;
- (void)startRootModeUpdatesForProductKeys:(NSArray *)arg1 clientBlocksRestart:(BOOL)arg2 replyWhenDone:(void (^)(NSDictionary *))arg3;
- (void)startUpdatesForProductKeys:(NSArray *)arg1 clientBlocksRestart:(BOOL)arg2 replyWhenDone:(void (^)(NSDictionary *))arg3;
- (void)startDownloadingForProductKeys:(NSArray *)arg1 replyWhenDone:(void (^)(NSDictionary *))arg2;
- (void)calculateDiskSpaceRequiredForUpdatesWithProductKeys:(NSArray *)arg1 downloadingOnly:(BOOL)arg2 reply:(void (^)(unsigned long long))arg3;
- (void)buildTagCacheIfNecessaryWithReply:(void (^)(void))arg1;
- (void)markRampedUpdatesAsSeenWithReply:(void (^)(void))arg1;
- (void)clearAllHiddenUpdatesWithReply:(void (^)(void))arg1;
- (void)setHidden:(BOOL)arg1 forProductKeys:(NSArray *)arg2 replyWhenDone:(void (^)(void))arg3;
- (void)refreshAvailableUpdatesForCurrentConfigurationLimitedToProductKeys:(NSArray *)arg1 distributionEnvironment:(NSDictionary *)arg2 installedPrinters:(NSDictionary *)arg3 preferredLocalizations:(NSArray *)arg4 replyWhenDone:(void (^)(NSError *))arg5;
- (void)progressForRefreshOfAvailableUpdatesWithReply:(void (^)(double))arg1;
- (void)refreshAvailableUpdates:(BOOL)arg1 preferredLocalizations:(NSArray *)arg2 replyWhenDone:(void (^)(NSError *))arg3;
- (void)catalogInformationWithReply:(void (^)(NSString *, int, BOOL, BOOL))arg1;
- (void)availableUpdatesOfType:(long long)arg1 withState:(long long)arg2 filteredByState:(long long)arg3 reply:(void (^)(NSArray *))arg4;
- (void)availableUpdatesOfType:(long long)arg1 withState:(long long)arg2 reply:(void (^)(NSArray *))arg3;
- (void)endTransactions;
- (void)takePostInstallNotificationsWithReply:(void (^)(long long, NSArray *, NSDictionary *))arg1;
- (void)authorizeForUpdatingWithExternalFormData:(NSData *)arg1 additionalTransactions:(unsigned long long)arg2 reply:(void (^)(BOOL))arg3;
@end

@interface SUSClientUtilities : NSObject
{
    NSString *_portName;
    const struct __SCDynamicStore *_store;
}

+ (id)copyPrimaryIPAddress;
- (id)getMacAddress;
- (id)getHostName;
- (id)serialNumberString;
- (id)getIPAddress;
- (void)dealloc;
- (id)initWithPortName:(id)arg1;

@end

@interface SUCatalogFetch : NSObject
{
    NSDictionary *_catalogDictionary;
    NSURL *_finalURL;
    NSString *_previousEntityTag;
    BOOL _skipIfUnchanged;
    NSString *_currentEntityTag;
    BOOL _didUseDefaultURL;
    BOOL _didUseAppleDefaultProductionURL;
    NSError *_error;
}

+ (BOOL)_isAppleSeedCatalogURL:(id)arg1;
+ (BOOL)isUsingAppleSeedCatalogURL;
+ (id)defaultAppleCatalogURL;
+ (id)appleCatalogURL;
+ (id)catalogURL;
- (id)error;
- (id)catalogEntityTag;
- (BOOL)isCatalogChanged;
- (BOOL)isAppleSeedCatalogURL;
- (BOOL)isDefaultAppleProductionCatalogURL;
- (BOOL)isDefaultAppleCatalogURL;
- (id)finalURL;
- (id)catalogDictionary;
- (void)dealloc;
- (id)init;
- (id)initWithURL:(id)arg1 previousEntityTag:(id)arg2 skipIfUnchanged:(BOOL)arg3;
- (id)_fetchCatalogDictionaryReturningError:(id *)arg1 finalURL:(id *)arg2 isAppleDefault:(char *)arg3 isAppleProductionDefault:(char *)arg4 usingURL:(id)arg5;
- (id)_fetchAppleCatalogDictionaryReturningError:(id *)arg1 finalURL:(id *)arg2 isAppleProductionDefault:(char *)arg3;
- (BOOL)_isEVCheckDisabled;
- (id)_fetchDictionaryFromURL:(id)arg1 returningError:(id *)arg2;

@end

@interface SUCatalog : NSObject
{
    NSURL *_catalogURL;
    NSDictionary *_dictionaryRepresentation;
}

- (id)extraInfoForProductKey:(id)arg1;
- (id)packageDictionariesForProductKey:(id)arg1;
- (id)distributionURLForProductKey:(id)arg1 preferredLocalizations:(id)arg2;
- (id)localizationsForProductKey:(id)arg1;
- (id)productDictionaryForProductKey:(id)arg1;
- (id)productKeys;
- (long long)catalogVersion;
- (id)dictionaryRepresentation;
- (id)catalogURL;
- (id)description;
- (void)dealloc;
- (id)initWithContentsOfURL:(id)arg1;
- (id)initWithDictionaryRepresentation:(id)arg1 catalogURL:(id)arg2;
- (id)productByLoadingDistributionForProductKey:(id)arg1 localization:(id)arg2 error:(id *)arg3;

@end

@interface SUProduct : NSObject <NSCoding>
{
    NSString *_productKey;
    PKDistribution *_distribution;
    NSDictionary *_extraInfo;
    NSDictionary *_packageInfoForPackageURL;
    unsigned long long _downloadSize;
    unsigned long long _installSize;
    NSString *_baseDisplayName;
    NSString *_displayVersion;
    NSString *_longDescription;
    int _restartAction;
    NSArray *_orderedPackageSpecifiersToInstallWithoutPatchFiltering;
    BOOL _startsSelected;
    NSMutableDictionary *_packageReferenceForPackageIdentifier;
    PKDistributionChoice *_swuChoice;
    NSDictionary *_distributionEnv;
    struct dispatch_queue_s *_q;
    long long _downloadSizeOnce;
    long long _installSizeOnce;
    long long _swuChoiceOnce;
}

+ (void)setUsingSeedCatalog:(BOOL)arg1;
+ (BOOL)isUsingSeedCatalog;
+ (void)setCatalogVersion:(long long)arg1;
+ (long long)catalogVersion;
+ (BOOL)_isCriticalWithExtraInfo:(id)arg1;
+ (id)__extendedValueForKey:(id)arg1 extraInfo:(id)arg2;
+ (BOOL)_isStagedWithExtraInfo:(id)arg1;
+ (id)_productKeysFromProducts:(id)arg1;
+ (BOOL)_willProductsRequireAuthorizationIfAdmin:(id)arg1;
+ (int)_installActionRequiredByProducts:(id)arg1;
+ (BOOL)_willProductsRequireLogout:(id)arg1;
- (unsigned long long)installSize;
- (unsigned long long)_installSizeForPackageReference:(id)arg1;
- (unsigned long long)downloadSize;
- (id)packageURLs;
- (BOOL)hasInstallablePackages;
- (id)packageReferenceForPackageIdentifier:(id)arg1;
- (void)invalidatePackageIdentifierInCache:(id)arg1;
- (id)packageInfoForPackageURL:(id)arg1;
- (id)packageIdentifiersToInstall;
- (id)orderedPackageSpecifiersToInstall;
- (id)orderedPackageReferencesToInstall;
- (BOOL)_isActiveDistributionPackageReference:(id)arg1;
- (id)allSoftwareUpdatePackageReferences;
- (id)_allPackageReferencesUnderChoice:(id)arg1;
- (int)restartAction;
- (id)readmeDataReturningMIMEType:(id *)arg1;
- (id)licenseDataReturningMIMEType:(id *)arg1;
- (id)_resourceDataForKey:(id)arg1 returningMIMEType:(id *)arg2;
- (id)descriptionDataReturningMIMEType:(id *)arg1;
- (id)displayVersion;
- (id)displayName;
- (id)identifier;
- (id)choice;
- (id)distribution;
- (id)productKey;
- (id)description;
- (void)didRegisterProductWithPackageSource;
- (BOOL)setPKMDataByPackageURL:(id)arg1;
- (void)_cacheDataFromDistributionController:(id)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithProductKey:(id)arg1 distribution:(id)arg2 distributionController:(id)arg3;
- (id)initWithProductKey:(id)arg1 catalogProductDictionary:(id)arg2 localization:(id)arg3 error:(id *)arg4;
- (id)_updateInfoDictionary;
- (void)_setDistributionEnvironment:(id)arg1;
- (id)_distributionEnvironment;
- (void)_setExtraInfo:(id)arg1;
- (id)_extraInfo;
- (BOOL)_shouldLaunchFirstLoginOptimization;
- (BOOL)_shouldAuthenticateReboot;
- (BOOL)_allowedToUseInstallLater;
- (id)_customPostInstallNotifyURL;
- (id)_customPostInstallNotifyText;
- (id)_customPostInstallNotifyTitle;
- (BOOL)_shouldNotifyUserAfterAutoInstall;
- (id)_customCriticalText;
- (id)_customCriticalTitle;
- (BOOL)_shouldRegisterCriticalUpdateForPostLogoutInstallNow;
- (BOOL)_shouldAutoInstallCriticalUpdateInBackgroundNow;
- (long long)_shouldAutoInstallCriticalUpdateWithDelayInHours;
- (BOOL)_isCritical;
- (BOOL)_isAdminDisabled;
- (BOOL)_isVisibleForPredicateOnly;
- (BOOL)_isConfigData;
- (BOOL)_isRampedUnseen;
- (BOOL)_isRamped;
- (BOOL)_isRecommendedForStageOnly:(BOOL)arg1;
- (BOOL)_isRecommended;
- (BOOL)_isStaged;
- (BOOL)_isIgnored;
- (BOOL)_isStandardVisibleRecommendedProduct;
- (BOOL)_requiresPKMData;
- (BOOL)_installsBundlePackages;
- (id)_disabledGroupID;
- (id)_labelVersion;
- (id)_label;

@end

@interface SUCatalogPackageSource : SUPackageSource
{
    NSMutableDictionary *_packageReferencesByProduct;
    NSMutableDictionary *_digestByPackageURLPath;
}

- (id)packageReferencesMatchingIdentifier:(id)arg1 version:(id)arg2;
- (id)allPackageReferences;
- (id)digestForPackageAtURLPath:(id)arg1;
- (id)description;
- (id)descriptionForProduct:(id)arg1;
- (void)dealloc;
- (BOOL)registerProduct:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithCatalog:(id)arg1;
- (id)_packageDictionaryForProductKey:(id)arg1 matchingPackageURL:(id)arg2;

@end

@interface SUProductLoadOperation : NSOperation
{
    NSString *_productKey;
    NSURL *_distributionURL;
    NSData *_distributionData;
    NSDictionary *extraInfo;
    BOOL shouldBuildCacheOnly;
    SUMetadataCache *metadataCache;
    NSDictionary *distributionEnv;
    SUProduct *_product;
    NSError *_error;
}

@property(retain) NSDictionary *distributionEnv; // @synthesize distributionEnv;
@property(retain) SUMetadataCache *metadataCache; // @synthesize metadataCache;
@property BOOL shouldBuildCacheOnly; // @synthesize shouldBuildCacheOnly;
@property(retain) NSDictionary *extraInfo; // @synthesize extraInfo;
- (id)error;
- (id)product;
- (BOOL)_isValidChoice:(id)arg1;
- (BOOL)applyPKMDataByPackageURL:(id)arg1;
- (BOOL)evaluateProduct;
- (id)description;
- (void)dealloc;
- (id)initWithProductKey:(id)arg1 distributionURL:(id)arg2 distributionData:(id)arg3;

@end

@interface SUScan : NSObject
{
    NSURL *catalogURL;
    NSArray *previousProducts;
    NSArray *preferredLocalizations;
    BOOL dontRunMakeQueues;
    NSDictionary *installedPrinters;
    BOOL shouldBuildCacheOnly;
    NSArray *filteredProductKeys;
    BOOL ignorePPDVersionCache;
    NSDictionary *distributionEnvironment;
    BOOL isBackgroundScan;
    double _progressValue;
    BOOL _isExecuting;
    int _productsCount;
    int _productsComplete;
    struct dispatch_queue_s *_stateQueue;
    NSArray *installableProducts;
    NSMutableArray *_packageSources;
    NSError *_error;
    BOOL _didLoadAllResourcesSuccessfully;
}

+ (int)_resultCodeFromScan:(id)arg1;
@property BOOL isBackgroundScan; // @synthesize isBackgroundScan;
@property(retain) NSDictionary *distributionEnvironment; // @synthesize distributionEnvironment;
@property BOOL ignorePPDVersionCache; // @synthesize ignorePPDVersionCache;
@property(retain) NSArray *filteredProductKeys; // @synthesize filteredProductKeys;
@property BOOL shouldBuildCacheOnly; // @synthesize shouldBuildCacheOnly;
@property(retain) NSDictionary *installedPrinters; // @synthesize installedPrinters;
@property BOOL dontRunMakeQueues; // @synthesize dontRunMakeQueues;
@property(retain) NSArray *preferredLocalizations; // @synthesize preferredLocalizations;
@property(retain) NSArray *previousProducts; // @synthesize previousProducts;
@property(retain) NSURL *catalogURL; // @synthesize catalogURL;
- (bycopy id)installableProducts;
- (BOOL)hasInstallableProducts;
- (BOOL)didLoadAllResourcesSuccessfully;
- (id)error;
- (BOOL)isFinished;
- (double)progressValue;
- (BOOL)isExecuting;
- (void)performSynchronousScan;
- (void)start;
- (void)_updatePackageSourcesWithCatalog:(id)arg1;
- (void)_scanMain:(id)arg1;
- (id)_clientDescription;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface SUTestDefaults : NSObject
{
    NSString *_testMode;
}

+ (id)sharedDefaults;
- (int)requiredPackageTrustLevelForCurrentMode;
- (BOOL)okayToUseNonProductionModeForPredicate;
- (BOOL)inThirdPartyMode;
- (BOOL)inDevKeyMode;
- (BOOL)inProductionMode;
- (void)exitTestMode;
- (id)currentTestMode;
- (BOOL)attemptToEnterTestMode:(id)arg1;
- (void)dealloc;

@end

@interface SUSignedFlatPkg : NSObject
{
}

+ (int)_verifyProductArchive:(id)arg1 atPath:(id)arg2 minimumTrust:(int)arg3 error:(id *)arg4;
+ (int)_verifyComponentPackage:(id)arg1 atPath:(id)arg2 minimumTrust:(int)arg3 error:(id *)arg4;
+ (int)verifyPackageAtPath:(id)arg1 minimumTrust:(int)arg2 error:(id *)arg3;

@end

@interface SUPublicKey : NSObject
{
}

+ (id)applePublicKeyData;
+ (id)applePublicKeyHeaderData;

@end

@interface SUTarSignedTarball : NSObject
{
}

+ (int)verifyTarSignedTarAtPath:(id)arg1 minimumTrust:(int)arg2 movePackageToPath:(id)arg3;
+ (BOOL)untarFile:(id)arg1 entry:(id)arg2 toDestination:(id)arg3 preservingOwnership:(BOOL)arg4;

@end

@interface SUURLConnection : PKURLConnection
{
}

+ (id)sessionID;
+ (id)sendSynchronousRequest:(id)arg1 returningResponse:(id *)arg2 error:(id *)arg3;
+ (void)initialize;

@end

@interface SULocalProduct : SUProduct
{
    NSString *_productPath;
    NSDictionary *_packageReferences;
    NSMutableSet *_mustCloseAppsToInstallProduct;
    SUProduct *_remoteProduct;
    NSURL *_altDistPackageURL;
}

- (int)restartAction;
- (id)mustCloseAppsToInstallProduct;
- (id)packageReferenceForPackageIdentifier:(id)arg1;
- (unsigned long long)installSize;
- (id)orderedPackageSpecifiersToInstall;
- (unsigned long long)sizeAlreadyDownloaded;
- (BOOL)isCompletelyDownloaded;
- (id)_localPackageReferenceFromDistribution:(id)arg1;
- (BOOL)hasInstallablePackages;
- (id)distributionEnvironment;
- (id)distributionPath;
- (id)productPath;
- (void)dealloc;
- (id)initWithProduct:(id)arg1 productPath:(id)arg2 error:(id *)arg3;

@end

@interface SUUpdateServiceClient : NSObject <SUUpdateService, SUUpdateClient>
{
    NSXPCConnection *_connection;
    int _clientPID;
    int _clientAuditIdentifier;
    unsigned int _clientUID;
    NSString *_clientPath;
    struct AuthorizationOpaqueRef *_installAuth;
    NSMutableArray *_acquiredRights;
    unsigned long long _transactionsStarted;
    struct dispatch_queue_s *_transactionQueue;
}

+ (void)ignoreClientMessagesForConnection:(id)arg1;
+ (void)authorizeForUpdating:(struct AuthorizationOpaqueRef *)arg1 overConnection:(id)arg2 additionalTransactions:(unsigned long long)arg3 reply:(CDUnknownBlockType)arg4;
+ (void)authorizeForUpdating:(struct AuthorizationOpaqueRef *)arg1 overConnection:(id)arg2 reply:(CDUnknownBlockType)arg3;
@property(readonly) NSXPCConnection *connection; // @synthesize connection=_connection;
- (void)installStateDidChange:(id)arg1 forUpdateWithProductKey:(id)arg2;
- (void)availableUpdatesDidChange;
- (void)resetServiceWithReply:(CDUnknownBlockType)arg1;
- (void)dumpServiceDebugInfo;
- (void)combinedStatusForUpdatesWithProductKeys:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)statusForUpdateWithProductKey:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)takeRequestsToInstallAfterPostLogoutUpdatesWithReply:(CDUnknownBlockType)arg1;
- (void)registerRequestsToInstallAfterPostLogoutUpdates:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)productKeysToAutomaticallyInstallLaterWithReply:(CDUnknownBlockType)arg1;
- (void)setAutomaticallyInstallLater:(BOOL)arg1 forProductKeys:(id)arg2 replyWhenDone:(CDUnknownBlockType)arg3;
- (void)adoptManualProductArchiveByReadingFromFileHandle:(id)arg1 archiveName:(id)arg2 displayName:(id)arg3 displayVersion:(id)arg4 allowDevSigning:(BOOL)arg5 replyWithResult:(CDUnknownBlockType)arg6;
- (void)stringRepresentationOfLongDescriptionForProductKey:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)commitLoginCredentials:(CDUnknownBlockType)arg1;
- (void)stashLoginCredentialsEnablingFLO:(BOOL)arg1 darkModeIsEnabled:(BOOL)arg2 reply:(CDUnknownBlockType)arg3;
- (void)productKeysToInstallAfterLogoutWithReply:(CDUnknownBlockType)arg1;
- (void)registerToInstallAfterLogoutForProductKeys:(id)arg1 nowIsLater:(BOOL)arg2 restartNow:(BOOL)arg3 reply:(CDUnknownBlockType)arg4;
- (void)cancelUpdatesForProductKeys:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)startRootModeUpdatesForProductKeys:(id)arg1 clientBlocksRestart:(BOOL)arg2 replyWhenDone:(CDUnknownBlockType)arg3;
- (void)startUpdatesForProductKeys:(id)arg1 clientBlocksRestart:(BOOL)arg2 replyWhenDone:(CDUnknownBlockType)arg3;
- (void)startDownloadingForProductKeys:(id)arg1 replyWhenDone:(CDUnknownBlockType)arg2;
- (void)calculateDiskSpaceRequiredForUpdatesWithProductKeys:(id)arg1 downloadingOnly:(BOOL)arg2 reply:(CDUnknownBlockType)arg3;
- (void)buildTagCacheIfNecessaryWithReply:(CDUnknownBlockType)arg1;
- (void)markRampedUpdatesAsSeenWithReply:(CDUnknownBlockType)arg1;
- (void)clearAllHiddenUpdatesWithReply:(CDUnknownBlockType)arg1;
- (void)setHidden:(BOOL)arg1 forProductKeys:(id)arg2 replyWhenDone:(CDUnknownBlockType)arg3;
- (void)refreshAvailableUpdatesForCurrentConfigurationLimitedToProductKeys:(id)arg1 distributionEnvironment:(id)arg2 installedPrinters:(id)arg3 preferredLocalizations:(id)arg4 replyWhenDone:(CDUnknownBlockType)arg5;
- (void)progressForRefreshOfAvailableUpdatesWithReply:(CDUnknownBlockType)arg1;
- (void)refreshAvailableUpdates:(BOOL)arg1 preferredLocalizations:(id)arg2 replyWhenDone:(CDUnknownBlockType)arg3;
- (void)catalogInformationWithReply:(CDUnknownBlockType)arg1;
- (void)endTransactions;
- (void)takePostInstallNotificationsWithReply:(CDUnknownBlockType)arg1;
- (void)availableUpdatesOfType:(long long)arg1 withState:(long long)arg2 filteredByState:(long long)arg3 reply:(CDUnknownBlockType)arg4;
- (void)availableUpdatesOfType:(long long)arg1 withState:(long long)arg2 reply:(CDUnknownBlockType)arg3;
- (void)authorizeForUpdatingWithExternalFormData:(id)arg1 additionalTransactions:(unsigned long long)arg2 reply:(CDUnknownBlockType)arg3;
- (BOOL)_isAuthorizedForAppleSoftwareAsAdministrator;
- (BOOL)_isAuthorizedForAppleSoftware;
- (void)_noteAuthorizationUsed;
- (void)invalidate;
- (id)description;
- (void)dealloc;
- (id)initWithConnection:(id)arg1;

@end

@interface _SUUpdateServiceClientNullExportedObject : NSObject <SUUpdateClient>
{
}

- (void)installStateDidChange:(id)arg1 forUpdateWithProductKey:(id)arg2;
- (void)availableUpdatesDidChange;

@end

@interface SUProductManagerIndexFile : NSObject
{
    struct dispatch_queue_s *_updateQueue;
}

- (void)_setProductKeysToAutomaticallyInstallLater:(id)arg1;
- (id)_productKeysToAutomaticallyInstallLater;
- (void)_setProductKeysToInstallAtLogout:(id)arg1;
- (id)_productKeysToInstallAtLogout;
- (void)_setPath:(id)arg1 forProductKey:(id)arg2;
- (id)_pathForProductKey:(id)arg1;
- (id)_allProductKeys;
- (void)dealloc;
- (BOOL)_flushUpdatesIndexToDisk:(id)arg1;
- (id)_updatesIndexDict;
- (id)initWithPath:(id)arg1;

@end

@interface SUProductManager : NSObject
{
    id _indexFile;
    NSMutableSet *_lockedProducts;
    struct dispatch_queue_s *_updatesRepoQueue;
}

+ (id)sharedUpdatesDirectory;
+ (id)_suggestedPackagePathForFileName:(id)arg1 product:(id)arg2 createDirectoryIfNeeded:(BOOL)arg3;
+ (id)_suggestedProductPathForProduct:(id)arg1 createDirectoryIfNeeded:(BOOL)arg2;
+ (id)defaultManager;
- (unsigned long long)downloadedSizeForProduct:(id)arg1;
- (id)packagePathForPackageURL:(id)arg1 product:(id)arg2;
- (id)productPathForProduct:(id)arg1;
- (BOOL)isProductFullyDownloaded:(id)arg1;
- (id)localProductForProduct:(id)arg1;
- (id)allLocalProductKeys;
- (id)_anyLocalProductForProduct:(id)arg1;
- (BOOL)removeLocalProductWithKey:(id)arg1;
- (void)setLocked:(BOOL)arg1 forLocalProductWithKey:(id)arg2;
- (BOOL)createDirectoryForProduct:(id)arg1 error:(id *)arg2;
- (void)synchronize;
- (void)dealloc;
- (id)init;
- (id)productKeysToInstallAtLogout;
- (void)addProductsToInstallAtLogout:(id)arg1 replacingPrevious:(BOOL)arg2 nowIsLater:(BOOL)arg3;
- (id)productKeysToAutomaticallyInstallLater;
- (void)setProductKeysToAutomaticallyInstallLater:(id)arg1;
- (void)removeProductKeysToAutomaticallyInstallLater:(id)arg1;
- (id)addProductsToAutomaticallyInstallLater:(id)arg1;

@end

@interface SUDownloadAndVerifyOperation : NSOperation <NSURLConnectionDelegate>
{
    NSURL *_url;
    unsigned long long _expectedSize;
    NSString *_expectedDigest;
    NSString *_finalPath;
    NSError *_error;
    NSString *_productKey;
    NSString *_title;
    long long _automaticRetryCount;
    BOOL _networkRetry;
    BOOL _canRetry;
    SUURLDownload *_download;
    BOOL _isBusy;
    BOOL _backgroundPriority;
}

@property(nonatomic) BOOL backgroundPriority; // @synthesize backgroundPriority=_backgroundPriority;
@property long long automaticRetryCount; // @synthesize automaticRetryCount=_automaticRetryCount;
- (id)error;
- (id)finalPath;
- (void)cancel;
- (void)main;
- (id)download;
- (id)url;
- (void)dealloc;
- (id)initWithURL:(id)arg1 expectedDownloadSize:(unsigned long long)arg2 expectedDigest:(id)arg3 productKey:(id)arg4 productTitle:(id)arg5;
- (id)processDownloadedFileAtPath:(id)arg1 expectedDownloadSize:(unsigned long long)arg2 expectedDigest:(id)arg3 error:(id *)arg4;
- (void)suDownload:(id)arg1 didFailWithError:(id)arg2;
- (void)suDownload:(id)arg1 didFinishWritingToPath:(id)arg2;
- (void)suDownload:(id)arg1 didProgressChange:(float)arg2;
- (void)suDownload:(id)arg1 didReceiveResponse:(id)arg2;
- (void)suDownload:(id)arg1 didCancelAuthenticationChallenge:(id)arg2;
- (void)suDownload:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (void)suDownloadDidBegin:(id)arg1;

@end

@interface SUURLDownload : NSObject <NSURLDownloadDelegate, NSURLConnectionDelegate>
{
    NSURLDownload *_download;
    id _delegate;
    long long _downloadedLength;
    long long _expectedLength;
    NSLock *_progressLock;
    NSMutableArray *_dates;
    NSMutableArray *_lengthNumbers;
    struct __CFRunLoop *_cfRunLoop;
}

- (double)estimatedTimeRemaining;
- (float)averageBytesPerSecond;
- (BOOL)_updateProgressData;
- (BOOL)_isLastDateWithinTimeInterval:(double)arg1;
- (long long)expectedContentLength;
- (long long)downloadedLength;
- (void)cancel;
- (void)dealloc;
- (id)initWithRequest:(id)arg1 delegate:(id)arg2;
- (void)download:(id)arg1 didFailWithError:(id)arg2;
- (void)downloadDidFinish:(id)arg1;
- (void)download:(id)arg1 didReceiveDataOfLength:(unsigned long long)arg2;
- (void)download:(id)arg1 willResumeWithResponse:(id)arg2 fromByte:(long long)arg3;
- (void)download:(id)arg1 didReceiveResponse:(id)arg2;
- (void)download:(id)arg1 didCancelAuthenticationChallenge:(id)arg2;
- (void)download:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (id)download:(id)arg1 willSendRequest:(id)arg2 redirectResponse:(id)arg3;
- (void)downloadDidBegin:(id)arg1;

@end

@interface SUURLDownloadCache : NSObject
{
    struct dispatch_queue_s *_cacheQueue;
}

+ (id)appCacheDirectory;
+ (id)_defaultDirectoryAttributes;
+ (id)_defaultFileAttributes;
+ (id)defaultCache;
- (BOOL)emptyCache;
- (void)setResumeData:(id)arg1 forURL:(id)arg2;
- (id)resumeDataForURL:(id)arg1;
- (unsigned long long)partialDownloadFileSizeForURL:(id)arg1;
- (id)partialDownloadPathForURL:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface SUInstallOperation : NSOperation
{
    NSArray *_localProducts;
    PKInstallRequest *_request;
    BOOL _clientBlocksRestart;
    BOOL _allowOnlyAppleSignedFlatPackages;
    BOOL _holdBoostDuringInstall;
    BOOL _isStaging;
    unsigned int _packageScriptUserID;
    struct AuthorizationOpaqueRef *_overrideAuthorization;
    id <SUInstallOperationDelegate><NSObject> delegate;
    BOOL _didPreflight;
    BOOL _isInstalling;
    int _state;
    unsigned long long _totalSize;
    double _progressPercent;
    double _estimatedTimeRemaining;
    NSString *_firmwareStatus;
    double _lastFirmwareUpdateProgress;
    NSDate *_firmwareUpdateStalledAt;
    NSString *_activeSpecialStatus;
    BOOL _isDoingIndeterminateFirmwareUpdate;
    NSError *_nonSpecificError;
    NSMutableDictionary *_errorByProductKey;
    BOOL _didInstallSuccessfully;
    NSMutableArray *_productKeysToDelete;
    CDUnknownBlockType _finishBlock;
    CDUnknownBlockType _progressBlock;
}

+ (unsigned long long)workingSpaceForInstallSize:(unsigned long long)arg1;
+ (unsigned long long)adjustedInstallSize:(unsigned long long)arg1 forLocalProducts:(id)arg2;
+ (id)installOperationsWithLocalProducts:(id)arg1 forStaging:(BOOL)arg2;
+ (unsigned long long)_spaceRequiredForPossiblyStagedLocalProducts:(id)arg1;
+ (void)_enumerateProducts:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
+ (BOOL)_isCurrentlyStagedWithLocalProducts:(id)arg1 purgeableSize:(id *)arg2;
@property unsigned int packageScriptUserID; // @synthesize packageScriptUserID=_packageScriptUserID;
@property BOOL holdBoostDuringInstall; // @synthesize holdBoostDuringInstall=_holdBoostDuringInstall;
@property BOOL allowOnlyAppleSignedFlatPackages; // @synthesize allowOnlyAppleSignedFlatPackages=_allowOnlyAppleSignedFlatPackages;
@property BOOL clientBlocksRestart; // @synthesize clientBlocksRestart=_clientBlocksRestart;
@property id <SUInstallOperationDelegate><NSObject> delegate; // @synthesize delegate;
- (void)installClientDidFinish:(id)arg1;
- (void)installClient:(id)arg1 didFailWithError:(id)arg2;
- (void)installClient:(id)arg1 currentState:(int)arg2 package:(id)arg3 progress:(double)arg4 timeRemaining:(double)arg5;
- (void)setProgressBlock:(CDUnknownBlockType)arg1 andFinishBlock:(CDUnknownBlockType)arg2;
- (id)errorForProductKey:(id)arg1;
- (id)errorProductKeys;
- (BOOL)didInstallSuccessfully;
- (BOOL)performPreflightChecks;
- (BOOL)_performInstallTimeChecks;
- (id)_productFromPackageKitError:(id)arg1;
- (void)main;
- (void)_dispatchStatus:(id)arg1 progress:(float)arg2 timeRemaining:(double)arg3;
- (void)setAuthorizationRef:(struct AuthorizationOpaqueRef *)arg1;
- (void)removeInstalledOrInapplicableProducts;
- (id)activeSpecialStatus;
- (BOOL)isDoingIndeterminateFirmwareUpdate;
- (double)estimatedTimeRemaining;
- (double)progressPercent;
- (BOOL)isStaging;
- (unsigned long long)totalInstallSize;
- (id)localProducts;
- (void)dealloc;
- (id)_initWithLocalProducts:(id)arg1 stageOnly:(BOOL)arg2 spaceRequired:(unsigned long long)arg3;

@end

@interface SUProductDownloadOperation : NSOperation
{
    SUProduct *_product;
    BOOL _backgroundPriority;
    id delegate;
    unsigned long long _totalLength;
    unsigned long long _finishedLength;
    SUDownloadAndVerifyOperation *_downloadOp;
    BOOL _isCancelled;
    struct dispatch_queue_s *_opQueue;
    NSError *_error;
}

@property id delegate; // @synthesize delegate;
@property BOOL backgroundPriority; // @synthesize backgroundPriority=_backgroundPriority;
- (id)error;
- (BOOL)isCancelled;
- (float)averageBytesPerSecond;
- (double)progress;
- (unsigned long long)totalLength;
- (unsigned long long)currentLength;
- (void)cancel;
- (void)main;
- (id)product;
- (void)dealloc;
- (id)initWithProduct:(id)arg1;

@end

@interface SUScanPrefManager : NSObject
{
    Class _helperProxyClass;
    NSArray *_inactiveLabels;
    NSSet *_whitelistedUpdates;
    struct dispatch_queue_s *_cacheQueue;
}

+ (id)sharedManager;
+ (id)_currentSystemVersion;
+ (BOOL)isAdminUser:(unsigned int)arg1;
- (void)_updateWhitelistFromManagedPrefs:(id)arg1;
- (id)init;
- (BOOL)shouldEvaluateCriticalIfUnchanged;
- (void)clearCriticalUpdateNotificationDate;
- (BOOL)shouldAutoInstallCriticalUpdatesNowForDelay:(long long)arg1;
- (BOOL)shouldInvertStagedAndActiveStatesForTestingOnProduction;
- (BOOL)okayToUseThirdPartyTestMode;
- (BOOL)shouldConsiderOnlyStagedUpdates;
- (void)setInactiveProductLabels:(id)arg1;
- (id)inactiveProductLabels;
- (BOOL)shouldCriticalAndConfigDataCheckFireNow;
- (BOOL)shouldPeriodicCheckFireNow;
- (BOOL)_shouldCheckUnderCurrentConditionsWithInterval:(double)arg1 sinceLastCheck:(id)arg2;
- (BOOL)shouldScanAfterSystemVersionChanged;
- (void)setAppStoreAutoUpdates:(BOOL)arg1;
- (BOOL)doesAppStoreAutoUpdates;
- (void)setAutomaticCriticalUpdateInstall:(BOOL)arg1;
- (BOOL)doesAutomaticCriticalUpdateInstall;
- (void)setAutomaticConfigDataInstall:(BOOL)arg1;
- (BOOL)doesAutomaticConfigDataInstall;
- (void)setBackgroundDownload:(BOOL)arg1;
- (BOOL)doesBackgroundDownload;
- (double)scanFrequencyInterval;
- (void)setCheckScheduled:(BOOL)arg1;
- (BOOL)isCheckScheduled;
- (id)recommendedUpdateProductKeys;
- (void)setLastCheckAttemptSystemVersion;
- (id)lastCheckAttemptSystemVersion;
- (void)addPrimaryLanguageIfNecessary:(id)arg1;
- (void)removeAllRecommendedUpdates;
- (void)removeRecommendedUpdates:(id)arg1;
- (void)addRecommendedUpdates:(id)arg1;
- (void)setRecommendedUpdates:(id)arg1;
- (id)recommendedUpdates;
- (long long)lastRecommendedUpdatesAvailable;
- (long long)lastUpdatesAvailable;
- (void)setLastCheckResultCode:(int)arg1;
- (int)lastCheckResultCode;
- (void)setLastBackgroundCriticalAndConfigDataCheckSuccessfulDate:(id)arg1;
- (id)lastBackgroundCriticalAndConfigDataCheckSuccessfulDate;
- (void)setLastBackgroundCheckSuccessfulDate:(id)arg1;
- (id)lastBackgroundCheckSuccessfulDate;
- (void)setLastFullCheckSuccessfulDate:(id)arg1;
- (id)lastFullCheckSuccessfulDate;
- (void)setLastCheckSuccessfulDate:(id)arg1;
- (id)lastCheckSuccessfulDate;
- (id)productKeysForUpdateWhitelist;
- (BOOL)isUpdateWhitelistEnabled;
- (void)setDidSkipBackgroundDownloadLackingDiskSpace:(BOOL)arg1;
- (BOOL)didSkipBackgroundDownloadLackingDiskSpace;
- (void)setShouldSkipContentLocator:(BOOL)arg1;
- (BOOL)shouldSkipContentLocator;
- (void)setLastSessionCompletedSuccessfully:(BOOL)arg1;
- (BOOL)lastSessionCompletedSuccessfully;
- (void)updatePrefsIfNeeded;
- (void)setObject:(id)arg1 forAnyUserPreference:(id)arg2;
- (id)objectForAnyUserPreference:(id)arg1;
- (BOOL)isValidAnyUserPreference:(id)arg1;

@end

@interface SUPredicateInstallController : NSObject
{
    NSMutableDictionary *_resources;
    id <NSObject><SUPredicateInstallControllerDelegate> _delegate;
    NSDate *_lastCacheRefreshAttempt;
    NSTask *_currentTask;
}

+ (id)_localizedErrorForCode:(int)arg1;
- (BOOL)_isSoftwareUpdateRunningWithPID:(id)arg1;
- (void)_softwareUpdateDidExitWithCode:(id)arg1;
- (void)_softwareUpdateDidExit:(id)arg1;
- (BOOL)_startSoftwareUpdateWithOptionsFile:(id)arg1;
- (id)_writeOptionsFileForPredicate:(id)arg1 confirmComplete:(BOOL)arg2;
- (BOOL)_isUpdateUIAlreadyRunning;
- (id)_optionsFilePath;
- (BOOL)startUpdateUIWithPredicate:(id)arg1 customTitle:(id)arg2 customIconPath:(id)arg3 assumeExist:(BOOL)arg4 confirmComplete:(BOOL)arg5;
- (BOOL)startUpdateUIWithPredicate:(id)arg1 confirmComplete:(BOOL)arg2;
- (id)metadataOfCachedProductsMatchingPredicate:(id)arg1;
- (id)tagsOfCachedProductsMatchingPredicate:(id)arg1;
- (long long)countOfCachedProductsMatchingPredicate:(id)arg1;
- (BOOL)isCacheCurrent;
@property(copy) NSDictionary *installedPrintersPlist;
@property BOOL requireLicenseAgreement;
@property int legalTextType;
@property(copy) NSURL *helpURL;
@property(copy) NSString *helpAnchor;
@property(copy) NSString *notFoundMessage;
@property(copy) NSString *busyMessage;
@property(copy) NSString *busyTitle;
@property(copy) NSString *noServerMessage;
@property(copy) NSString *noServerTitle;
@property(copy) NSString *noNetworkMessage;
@property(copy) NSString *noNetworkTitle;
@property(copy) NSString *title;
@property(copy) NSString *iconPath;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1;

@end

@interface SUMetadataCache : NSObject
{
    NSString *_cachePath;
    NSMutableArray *_metadata;
    double _cacheAge;
}

+ (BOOL)isCacheCurrent;
- (BOOL)writeCacheToDisk;
- (id)cachedProductKeysMatchingPredicate:(id)arg1;
- (id)metadataMatchingPredicate:(id)arg1;
- (id)_metadataMatchingPredicate:(id)arg1 pruningProductKeys:(BOOL)arg2;
- (BOOL)addMetadataFromDistribution:(id)arg1 forProductKey:(id)arg2 isStaged:(BOOL)arg3;
- (void)clearCache;
- (double)existingCacheAge;
- (void)dealloc;
- (id)init;
- (id)initByReadingDiskCache:(BOOL)arg1;

@end

@interface SUPrinterScan : NSObject
{
}

+ (BOOL)runMakequeues;

@end

@interface SUHelperProxy : NSObject <SUHelperDProtocol>
{
    unsigned int _suhelperd_port;
    unsigned int _client_port;
    long long _currentRights;
    struct dispatch_queue_s *_q;
}

+ (id)sharedProxyIfAvailable;
+ (id)sharedProxy;
- (BOOL)_launchDaemonMode;
- (BOOL)commitLoginCredentials;
- (BOOL)stashLoginCredentialsEnablingFLO:(BOOL)arg1 darkModeIsEnabled:(BOOL)arg2;
- (BOOL)restoreDefaultCatalog;
- (BOOL)setAppStoreAutoUpdate:(BOOL)arg1;
- (BOOL)clearCriticalUpdateNotificationDate;
- (BOOL)removeUpdatesAvailableCookie;
- (BOOL)createUpdatesAvailableCookie;
- (BOOL)updateAnyUserPreferences;
- (BOOL)clearAnyUserPreference:(id)arg1;
- (BOOL)setObject:(id)arg1 forAnyUserPreference:(id)arg2;
- (BOOL)getDigest:(id *)arg1 forPackageAtURL:(id)arg2;
- (BOOL)removeProductDirectoryForKey:(id)arg1;
- (BOOL)removeDistForProductKey:(id)arg1 withFilename:(id)arg2;
- (BOOL)createDirectoryForProductKey:(id)arg1;
- (id)readUpdatesIndex;
- (BOOL)writeUpdatesIndex:(id)arg1;
- (BOOL)removeIndexFromUpdates;
- (BOOL)movePPDVersionCacheToUpdatesFromPath:(id)arg1;
- (BOOL)moveMetadataCacheToUpdatesFromPath:(id)arg1;
- (BOOL)removeMetadataCacheFromUpdates;
- (BOOL)moveInstalledPrintersToLibraryFromPath:(id)arg1;
- (BOOL)makeQueues;
- (BOOL)registerProductFile:(id)arg1 forProductKey:(id)arg2 trustLevel:(int *)arg3 keepOriginal:(BOOL)arg4;
- (int)prepareForLogoutAndInstall;
- (void)authorizeWithEmptyAuthorizationForRights:(long long)arg1;
- (BOOL)disconnect;
- (void)authorizeTool:(struct AuthorizationOpaqueRef *)arg1 forRights:(long long)arg2;
- (void)finalize;
- (void)dealloc;
- (id)init;
- (BOOL)isAuthorizedForRights:(long long)arg1;
- (BOOL)_isAuthorized;

@end

@interface SUDevKey : NSObject
{
}

+ (id)devKeyData;
+ (id)devKeyHeaderData;
+ (BOOL)canLoadDevKey;
+ (BOOL)_loadDevKeyIfNeeded;
+ (void)_waitAndDownloadWhenNetworkAvailableWithRequest:(id)arg1;
+ (BOOL)_parseKeysFromData:(id)arg1;

@end

@interface SUSoftwareUpdateController : NSObject
{
    NSXPCConnection *_connection;
    struct AuthorizationOpaqueRef *_authRef;
    BOOL _destroyAuthRef;
    BOOL _didSendAuth;
    id <SUSoftwareUpdateControllerDelegate> _delegate;
    SUPowerSourceMonitor *_powerMonitor;
    BOOL _requireACPower;
    NSDictionary *_installedPrintersPlist;
    NSError *_lastCantStartError;
    struct dispatch_queue_s *_updateQueue;
    double _progressPercentage;
    NSPredicate *_currentPredicate;
    NSArray *_matchingUpdates;
    NSArray *_matchingUpdateKeys;
    int _currentState;
    double _estimatedTimeForCurrentState;
    double _currentProgressFraction;
    unsigned long long _downloadedSize;
    unsigned long long _totalSize;
    struct dispatch_semaphore_s *_runningUpdate;
    struct dispatch_source_s *_timerSource;
    BOOL _doingFallbackScan;
    BOOL _didCancel;
    NSWindow *_windowForSheet;
}

@property(readonly) unsigned long long totalSize; // @synthesize totalSize=_totalSize;
@property(readonly) unsigned long long downloadedSize; // @synthesize downloadedSize=_downloadedSize;
@property(retain) NSWindow *windowForSheet; // @synthesize windowForSheet=_windowForSheet;
@property(readonly) int currentState; // @synthesize currentState=_currentState;
@property(readonly) double estimatedTimeForCurrentState; // @synthesize estimatedTimeForCurrentState=_estimatedTimeForCurrentState;
@property(readonly) double progressPercentage; // @synthesize progressPercentage=_progressPercentage;
@property(copy) NSDictionary *installedPrintersPlist; // @synthesize installedPrintersPlist=_installedPrintersPlist;
@property BOOL requireACPower; // @synthesize requireACPower=_requireACPower;
- (id)_errorWithCode:(int)arg1 userInfo:(id)arg2 underlyingError:(id)arg3 recoveryAction:(CDUnknownBlockType)arg4;
- (void)_closeNecessaryApplicationsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_checkAndInstallMatchingUpdatesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_runWithCompletionHandler:(CDUnknownBlockType)arg1;
- (BOOL)_determineUpdatesToInstallFromAvailable:(id)arg1 filterKey:(id)arg2;
- (void)_notifyUpdateEndedWithError:(id)arg1 didCancel:(BOOL)arg2;
- (void)_notifyCanUpdateChanged;
- (void)_setAndNotifyEstimatedTimeForCurrentState:(double)arg1;
- (void)_clearAndNotifyProgressPercentage;
- (void)_setAndNotifyProgressPercentage:(double)arg1;
- (void)_setAndNotifyCurrentState:(int)arg1;
- (BOOL)cancelUpdate;
@property(readonly) BOOL canCancelUpdate;
- (void)_updateProgressParameters;
- (void)startUpdateInBackgroundWithPredicate:(id)arg1;
- (id)metadataOfCachedProductsMatchingPredicate:(id)arg1;
- (id)tagsOfCachedProductsMatchingPredicate:(id)arg1;
- (long long)countOfCachedProductsMatchingPredicate:(id)arg1;
- (BOOL)isCacheCurrent;
- (BOOL)_canStartUpdateWithPredicate:(id)arg1 error:(id *)arg2;
- (BOOL)canStartUpdateReturningError:(id *)arg1;
@property(readonly) BOOL canStartUpdate;
- (BOOL)_authorizeNowIfNeeded;
- (BOOL)setAuthorization:(struct AuthorizationOpaqueRef *)arg1;
- (BOOL)_connectToService;
- (void)finalize;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1 localizedProductName:(id)arg2;

@end

@interface SUSoftwareUpdateErrorHandler : NSObject
{
    int _code;
    CDUnknownBlockType _action;
}

- (void)attemptRecoveryFromError:(id)arg1 optionIndex:(unsigned long long)arg2 delegate:(id)arg3 didRecoverSelector:(SEL)arg4 contextInfo:(void *)arg5;
- (BOOL)attemptRecoveryFromError:(id)arg1 optionIndex:(unsigned long long)arg2;
- (void)_launchNetworkDiagnosticsForError:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (void)dealloc;
- (id)initWithErrorCode:(int)arg1 action:(CDUnknownBlockType)arg2;

@end

@interface SUPowerSourceMonitor : NSObject
{
    struct __CFRunLoopSource *_powerRunLoopSource;
    struct dispatch_queue_s *_notifyQueue;
    CDUnknownBlockType _notifyBlock;
    BOOL _isAC;
}

+ (BOOL)isSafeToAutoInstallGivenCurrentPowerSources;
+ (BOOL)isRunningOnACPower;
- (void)_stopObservingPowerSource;
- (void)_startObservingPowerSource;
- (void)_handleChangeInPowerSource;
- (void)stop;
- (void)start;
- (void)finalize;
- (void)dealloc;
- (id)initWithQueue:(struct dispatch_queue_s *)arg1 usingBlock:(CDUnknownBlockType)arg2;

@end

@interface SUReachabilityMonitor : NSObject
{
    struct __SCNetworkReachability *_reachability;
    struct dispatch_queue_s *_notifyQueue;
    NSString *_hostName;
    NSString *_directHostName;
    BOOL _observing;
    CDUnknownBlockType _notifyBlock;
}

+ (id)_directHostToCheckConsideringProxy:(id)arg1;
+ (BOOL)_isHostReachableWithFlags:(unsigned int)arg1;
+ (BOOL)waitForNetworkAvailabilityWithTimeout:(long long)arg1;
+ (id)_catalogHost;
+ (BOOL)isHostReachable:(id)arg1;
- (void)_handleChangeInReachability:(unsigned int)arg1;
- (void)_stopListeningForReachabilityChanges;
- (BOOL)_startListeningForReachabilityChanges;
- (void)stop;
- (void)start;
- (BOOL)isHostReachable;
- (void)finalize;
- (void)dealloc;
- (id)initWithHostName:(id)arg1 notifyQueue:(struct dispatch_queue_s *)arg2 usingBlock:(CDUnknownBlockType)arg3;

@end

@interface SUAppStoreUpdateController : NSObject <SUUpdateClient>
{
    NSXPCConnection *_connection;
    NSArray *_currentUpdates;
    NSArray *_queuedUpdates;
    struct dispatch_queue_s *_q;
    BOOL _requireACPower;
    SUPowerSourceMonitor *_powerMonitor;
    struct dispatch_queue_s *_scanAndSessionQ;
    NSError *_lastCantStartError;
    struct AuthorizationOpaqueRef *_authRef;
    BOOL _didSendAuth;
    BOOL _destroyAuthRef;
    struct dispatch_queue_s *_authQueue;
}

+ (id)_errorWithCode:(int)arg1 userInfo:(id)arg2 underlyingError:(id)arg3;
+ (id)keyPathsForValuesAffectingCanStartUpdate;
+ (id)sharedUpdateController;
@property BOOL requireACPower; // @synthesize requireACPower=_requireACPower;
- (void)installStateDidChange:(id)arg1 forUpdateWithProductKey:(id)arg2;
- (void)availableUpdatesDidChange;
- (BOOL)resetIgnoredUpdates;
- (BOOL)hasIgnoredUpdates;
- (id)_ignoredUpdateKeys;
- (BOOL)ignoreUpdate:(id)arg1;
- (BOOL)registerRequestsToInstallAfterPostLogoutUpdates:(id)arg1 error:(id *)arg2;
- (void)cancelOperation:(id)arg1;
- (void)_stashLoginCredentialsEnablingFLO:(BOOL)arg1 darkModeIsEnabled:(BOOL)arg2;
- (void)_stashLoginCredentialsIfAppropriate:(id)arg1 darkModeIsEnabled:(BOOL)arg2;
- (id)updatesToBeInstalledLater;
- (BOOL)removeAllUpdatesFromInstallLater;
- (BOOL)installUpdatesLater:(id)arg1;
- (id)updatesToBeInstalledAfterLogout;
- (BOOL)installUpdatesAfterNextLogout:(id)arg1 restartingNow:(BOOL)arg2 nowIsLater:(BOOL)arg3;
- (BOOL)installUpdatesAfterNextLogout:(id)arg1 restartingNow:(BOOL)arg2;
- (id)startDownloadingPostLogoutUpdates:(id)arg1 notifyOn:(struct dispatch_queue_s *)arg2 progress:(CDUnknownBlockType)arg3 finish:(CDUnknownBlockType)arg4;
- (BOOL)isDownloadRequiredForPostLogoutUpdates:(id)arg1;
- (id)startInstallingUpdates:(id)arg1 notifyOn:(struct dispatch_queue_s *)arg2 progress:(CDUnknownBlockType)arg3 finish:(CDUnknownBlockType)arg4;
- (id)_dictFromUpdateStatus:(id)arg1;
- (id)_startSessionForUpdates:(id)arg1 withInstall:(BOOL)arg2 notifyOn:(struct dispatch_queue_s *)arg3 progress:(CDUnknownBlockType)arg4 finish:(CDUnknownBlockType)arg5;
- (BOOL)_authorizeIfNeeded:(BOOL)arg1;
- (id)applicationIdentifiersToCloseForUpdates:(id)arg1;
- (unsigned long long)diskSpaceRequiredForUpdates:(id)arg1;
- (int)actionRequiredForUpdates:(id)arg1;
- (id)_updatesFromProductKeys:(id)arg1;
- (id)_productKeysFromUpdates:(id)arg1;
- (BOOL)isSeedCatalog;
- (int)catalogTrustLevel;
- (id)catalogHostName;
- (void)_retrieveCatalogInformationWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)startScanningForUpdatesIncludingPrerelease:(BOOL)arg1 rampedUnseen:(BOOL)arg2 evenIfUnchanged:(BOOL)arg3 notifyOn:(struct dispatch_queue_s *)arg4 progress:(CDUnknownBlockType)arg5 finish:(CDUnknownBlockType)arg6;
- (id)_shortDescriptionOfUpdates:(id)arg1;
- (void)_queryForAvailableUpdatesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_setAvailableUpdatesAndNotify:(id)arg1 currentStatus:(id)arg2;
- (id)availableUpdates;
- (void)_updateCanStartUpdate:(id)arg1;
- (BOOL)canStartUpdateReturningError:(id *)arg1;
@property(readonly) BOOL canStartUpdate;
- (BOOL)setAuthorization:(struct AuthorizationOpaqueRef *)arg1;
- (BOOL)_connectToService;
- (void)dealloc;
- (id)init;
- (BOOL)installQueuedUpdatesAfterNextLogoutRestartingNow:(BOOL)arg1;
- (id)startDownloadingPostLogoutQueuedUpdatesAndNotifyOn:(struct dispatch_queue_s *)arg1 progress:(CDUnknownBlockType)arg2 finish:(CDUnknownBlockType)arg3;
- (BOOL)isDownloadRequiredForPostLogoutQueuedUpdates;
- (id)startInstallingQueuedUpdatesAndNotifyOn:(struct dispatch_queue_s *)arg1 progress:(CDUnknownBlockType)arg2 finish:(CDUnknownBlockType)arg3;
- (id)applicationIdentifiersToCloseForQueuedUpdates;
- (unsigned long long)diskSpaceRequiredForQueuedUpdates;
- (int)actionRequiredForQueuedUpdates;
- (id)_queuedProductKeys;
- (id)queuedUpdates;
- (BOOL)dequeueUpdate:(id)arg1;
- (BOOL)enqueueUpdate:(id)arg1;
- (void)_setQueuedUpdatesAndNotify:(id)arg1;

@end

@interface _SUAppStoreControllerCancelHandler : NSObject
{
    NSXPCConnection *_connection;
    NSArray *_keys;
    BOOL _isCancelled;
    struct dispatch_queue_s *_syncQueue;
}

- (void)cancel;
- (void)setProductKeys:(id)arg1;
- (BOOL)isCancelled;
- (void)dealloc;
- (id)initWithConnection:(id)arg1;

@end

@interface SUAppStoreUpdate : NSObject <NSSecureCoding>
{
    SUUpdateProduct *_product;
    NSError *_updateError;
    long long _lastState;
    struct dispatch_queue_s *_q;
    NSString *_longDescriptionString;
    NSXPCConnection *_connection;
}

+ (BOOL)supportsSecureCoding;
@property(nonatomic) NSXPCConnection *connection; // @synthesize connection=_connection;
@property(retain, nonatomic) NSString *longDescriptionString; // @synthesize longDescriptionString=_longDescriptionString;
@property(readonly) BOOL canRetry;
@property(readonly) NSError *updateError;
@property(readonly) NSArray *applicationIdentifiersToClose;
@property(readonly) NSURL *customURLForPostInstallNotification;
@property(readonly) NSString *customTextForPostInstallNotification;
@property(readonly) NSString *customTitleForPostInstallNotification;
@property(readonly) BOOL showPostInstallNotification;
@property(readonly) long long autoInstallWithDelayInHours;
@property(readonly) BOOL isCritical;
@property(readonly) BOOL allowedToUseInstallLater;
@property(readonly) BOOL isRamped;
@property(readonly) BOOL isRecommended;
@property(readonly) id auxInfo;
@property(readonly) NSArray *tags;
@property(readonly) NSString *productKey;
@property(readonly) NSAttributedString *firmwareWarning;
@property(readonly) NSAttributedString *licenseAgreement;
@property(readonly) NSString *currentLocalization;
@property(readonly) int action;
@property(readonly) NSString *longDescription;
- (BOOL)_connectToService;
@property(readonly) NSString *versionString;
@property(readonly) NSString *title;
- (id)description;
- (void)_setCurrentStatus:(id)arg1;
- (void)_setProduct:(id)arg1;
- (id)_product;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)_initWithProduct:(id)arg1;

@end

@interface _SUAttributedStringWebResourceLoadDelegate : NSObject
{
}

- (id)webView:(id)arg1 resource:(id)arg2 willSendRequest:(id)arg3 redirectResponse:(id)arg4 fromDataSource:(id)arg5;

@end

@interface SUPowerAssertionManager : NSObject
{
    NSMutableDictionary *_assertionDict;
}

- (void)cancelPowerAssertionWithDescription:(id)arg1;
- (void)createPowerAssertionWithType:(struct __CFString *)arg1 timeout:(double)arg2 andDescription:(id)arg3;
- (void)createPowerAssertionWithDescription:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface SUManualProductAdopter : NSObject
{
    NSXPCConnection *_connection;
    NSString *_archivePath;
    NSString *_displayName;
    NSString *_displayVersion;
    BOOL _allowDevSigned;
    BOOL _didFail;
}

+ (BOOL)restartNow;
@property BOOL allowDevSigned; // @synthesize allowDevSigned=_allowDevSigned;
@property(copy) NSString *displayVersion; // @synthesize displayVersion=_displayVersion;
@property(copy) NSString *displayName; // @synthesize displayName=_displayName;
- (BOOL)installAfterLogoutRestartingNow:(BOOL)arg1;
- (BOOL)adoptReturningError:(id *)arg1;
- (BOOL)authorize:(struct AuthorizationOpaqueRef *)arg1;
- (void)dealloc;
- (id)initWithManualProductArchiveAtPath:(id)arg1 error:(id *)arg2;

@end

@interface SUUpdateProduct : NSObject <NSSecureCoding>
{
    BOOL _allowedToUseInstallLater;
    BOOL _shouldAuthenticateReboot;
    BOOL _shouldLaunchFirstLoginOptimization;
    BOOL _doItLaterUpdateAndNowIsLater;
    BOOL _isFirmwareUpdate;
    BOOL _showPostInstallNotification;
    int _action;
    NSString *_title;
    NSString *_versionString;
    NSString *_currentLocalization;
    NSData *_longDescriptionData;
    NSString *_longDescriptionMIMEType;
    NSData *_licenseAgreementData;
    NSString *_licenseAgreementMIMEType;
    NSData *_firmwareWarningData;
    NSString *_firmwareWarningMIMEType;
    NSString *_productKey;
    long long _serverState;
    long long _type;
    NSArray *_applicationIdentifiersToClose;
    NSArray *_tags;
    id _auxInfo;
    NSString *_identifierForProductLabel;
    NSString *_versionForProductLabel;
    long long _shouldAutoInstallWithDelayInHours;
    NSString *_customCriticalNotificationTitle;
    NSString *_customCriticalNotificationText;
    NSString *_customTitleForPostInstallNotification;
    NSString *_customTextForPostInstallNotification;
    NSURL *_customURLForPostInstallNotification;
}

+ (id)stringForUpdateType:(long long)arg1;
+ (id)stringForUpdateState:(long long)arg1;
+ (BOOL)supportsSecureCoding;
@property(readonly) NSURL *customURLForPostInstallNotification; // @synthesize customURLForPostInstallNotification=_customURLForPostInstallNotification;
@property(readonly) NSString *customTextForPostInstallNotification; // @synthesize customTextForPostInstallNotification=_customTextForPostInstallNotification;
@property(readonly) NSString *customTitleForPostInstallNotification; // @synthesize customTitleForPostInstallNotification=_customTitleForPostInstallNotification;
@property(readonly) BOOL showPostInstallNotification; // @synthesize showPostInstallNotification=_showPostInstallNotification;
@property(readonly) NSString *customCriticalNotificationText; // @synthesize customCriticalNotificationText=_customCriticalNotificationText;
@property(readonly) NSString *customCriticalNotificationTitle; // @synthesize customCriticalNotificationTitle=_customCriticalNotificationTitle;
@property(readonly) long long shouldAutoInstallWithDelayInHours; // @synthesize shouldAutoInstallWithDelayInHours=_shouldAutoInstallWithDelayInHours;
@property BOOL isFirmwareUpdate; // @synthesize isFirmwareUpdate=_isFirmwareUpdate;
@property BOOL doItLaterUpdateAndNowIsLater; // @synthesize doItLaterUpdateAndNowIsLater=_doItLaterUpdateAndNowIsLater;
@property(readonly) BOOL shouldLaunchFirstLoginOptimization; // @synthesize shouldLaunchFirstLoginOptimization=_shouldLaunchFirstLoginOptimization;
@property(readonly) BOOL shouldAuthenticateReboot; // @synthesize shouldAuthenticateReboot=_shouldAuthenticateReboot;
@property(readonly) BOOL allowedToUseInstallLater; // @synthesize allowedToUseInstallLater=_allowedToUseInstallLater;
@property(readonly) NSString *versionForProductLabel; // @synthesize versionForProductLabel=_versionForProductLabel;
@property(readonly) NSString *identifierForProductLabel; // @synthesize identifierForProductLabel=_identifierForProductLabel;
@property(readonly) id auxInfo; // @synthesize auxInfo=_auxInfo;
@property(readonly) NSArray *tags; // @synthesize tags=_tags;
@property(readonly) NSArray *applicationIdentifiersToClose; // @synthesize applicationIdentifiersToClose=_applicationIdentifiersToClose;
@property(readonly) long long type; // @synthesize type=_type;
@property(readonly) long long serverState; // @synthesize serverState=_serverState;
@property(readonly) NSString *productKey; // @synthesize productKey=_productKey;
@property(readonly) NSString *firmwareWarningMIMEType; // @synthesize firmwareWarningMIMEType=_firmwareWarningMIMEType;
@property(readonly) NSData *firmwareWarningData; // @synthesize firmwareWarningData=_firmwareWarningData;
@property(readonly) NSString *licenseAgreementMIMEType; // @synthesize licenseAgreementMIMEType=_licenseAgreementMIMEType;
@property(readonly) NSData *licenseAgreementData; // @synthesize licenseAgreementData=_licenseAgreementData;
@property(readonly) NSString *longDescriptionMIMEType; // @synthesize longDescriptionMIMEType=_longDescriptionMIMEType;
@property(readonly) NSData *longDescriptionData; // @synthesize longDescriptionData=_longDescriptionData;
@property(readonly) NSString *currentLocalization; // @synthesize currentLocalization=_currentLocalization;
@property(readonly) int action; // @synthesize action=_action;
@property(readonly) NSString *versionString; // @synthesize versionString=_versionString;
@property(readonly) NSString *title; // @synthesize title=_title;
- (id)updateLabel;
- (id)licenseAgreement;
- (id)firmwareWarning;
- (id)stringRepresentationOfLongDescription;
- (id)longDescription;
- (id)debugDescription;
- (id)description;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithSUProduct:(id)arg1;

@end

@interface SUUpdateStatus : NSObject <NSSecureCoding, NSCopying>
{
    NSString *_productKey;
    long long _installState;
    long long _activePhases;
    NSError *_error;
    unsigned long long _totalBytes;
    unsigned long long _downloadedBytes;
    double _estimatedTimeRemainingForDownload;
    double _installProgressPercent;
    double _estimatedTimeRemainingForInstall;
    NSString *_specialInstallStatus;
}

+ (BOOL)isActiveInstallState:(long long)arg1;
+ (id)stringForInstallState:(long long)arg1;
+ (BOOL)supportsSecureCoding;
@property(copy, nonatomic) NSString *specialInstallStatus; // @synthesize specialInstallStatus=_specialInstallStatus;
@property(nonatomic) double estimatedTimeRemainingForInstall; // @synthesize estimatedTimeRemainingForInstall=_estimatedTimeRemainingForInstall;
@property(nonatomic) double installProgressPercent; // @synthesize installProgressPercent=_installProgressPercent;
@property(nonatomic) double estimatedTimeRemainingForDownload; // @synthesize estimatedTimeRemainingForDownload=_estimatedTimeRemainingForDownload;
@property(nonatomic) unsigned long long downloadedBytes; // @synthesize downloadedBytes=_downloadedBytes;
@property(nonatomic) unsigned long long totalBytes; // @synthesize totalBytes=_totalBytes;
@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(nonatomic) long long activePhases; // @synthesize activePhases=_activePhases;
@property(nonatomic) long long installState; // @synthesize installState=_installState;
@property(readonly) NSString *productKey; // @synthesize productKey=_productKey;
@property(readonly, nonatomic) double estimatedTimeRemaining;
@property(readonly, nonatomic) double progressPercent;
- (id)description;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithProductKey:(id)arg1;

@end

@interface SUContentLocator : NSObject
{
    NSData *_lookupResponseData;
    NSError *_error;
    NSMutableDictionary *_prodIDToPackageURLsMap;
    NSMutableDictionary *_packageIDToURLsMap;
    NSArray *_products;
    BOOL _evChecksDisabled;
    BOOL _digestChecksDisabled;
}

+ (id)contentLocatorURL;
+ (void)initialize;
- (id)urlForPackageIdenfier:(id)arg1 forType:(int)arg2;
- (id)packageURLsForProduct:(id)arg1;
- (BOOL)lookupContentLocationWithCatalog:(id)arg1;
- (id)_packageDictionaryForProductKey:(id)arg1 matchingPackageURL:(id)arg2 usingCatalog:(id)arg3;
- (BOOL)_parseLocatorResponse;
- (BOOL)_sendCLRequest:(id)arg1;
- (void)dealloc;
- (id)initWithProducts:(id)arg1;
- (void)_loadCLPrefs;

@end

@interface SUContentLocatorPackageSource : SUPackageSource
{
    NSMutableDictionary *_packageReferencesByProduct;
    NSMutableDictionary *_digestByPackageURLPath;
    NSMutableArray *_allProducts;
}

+ (void)handleInstallError:(id)arg1;
+ (void)clearSkipContentLocatorFlag;
+ (BOOL)shouldSkipContentLocator;
+ (void)initialize;
- (id)packageReferencesMatchingIdentifier:(id)arg1 version:(id)arg2;
- (id)allPackageReferences;
- (id)digestForPackageAtURLPath:(id)arg1;
- (id)description;
- (id)descriptionForProduct:(id)arg1;
- (void)dealloc;
- (BOOL)doScanFinishedOps;
- (BOOL)_registerProductForContentLocation:(id)arg1 urls:(id)arg2;
- (BOOL)registerProduct:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithCatalog:(id)arg1;
- (id)_packageDictionaryForProductKey:(id)arg1 matchingPackageURL:(id)arg2;

@end

@interface SUPackageSource : NSObject <NSCoding, PKPackageSource>
{
    SUCatalog *_catalog;
    BOOL _packageSourceIsValid;
}

@property(retain) SUCatalog *catalog; // @synthesize catalog=_catalog;
@property BOOL packageSourceIsValid; // @synthesize packageSourceIsValid=_packageSourceIsValid;
- (id)allPackageReferences;
- (BOOL)doScanFinishedOps;
- (id)digestForPackageAtURLPath:(id)arg1;
- (BOOL)registerProduct:(id)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithCatalog:(id)arg1;

@end

@interface SUUpdateServiceDaemon : NSObject <SUUpdateService, NSXPCListenerDelegate>
{
    NSXPCListener *_listener;
    NSMutableArray *_clients;
    NSMutableArray *_availableUpdates;
    SUProduct *_adoptedManualProduct;
    SUBackgroundActions *_background;
    SUPowerAssertionManager *_powerAssertionManager;
    long long _didAutoInstallNotifyCount;
    NSMutableArray *_didAutoInstallNotifyStrings;
    NSMutableArray *_lastBackgroundIncompleteProductKeys;
    NSMutableArray *_additionalPostLogoutInstallRequests;
    NSMutableDictionary *_productsInstalledAfterPostLogoutInstallDictionary;
    NSMutableDictionary *_additionalPackageDigestsByURL;
    NSDictionary *_principalUserCookie;
    struct dispatch_queue_s *_serviceQueue;
    struct dispatch_queue_s *_updateInfoQueue;
    struct dispatch_queue_s *_clientNotifyQueue;
    struct dispatch_queue_s *_backgroundActivityQueue;
    long long _lastThermalEmergencyCount;
    long long _retriesForBackgroundActivity;
}

+ (id)_daemonStateArchivePath;
+ (id)sharedDaemon;
- (BOOL)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
- (id)_takeAllValidAdditionalPostLogoutInstallRequests;
- (id)_addAdditionalPostLogoutInstallRequests:(id)arg1;
- (void)_runBackgroundActionsOnCurrentQueueIfAppropriate:(char *)arg1;
- (void)_installStateDidChangeForKeys:(id)arg1;
- (void)_refreshLocalUpdateObjects:(id)arg1 afterScan:(BOOL)arg2;
- (void)resetServiceWithReply:(CDUnknownBlockType)arg1;
- (void)dumpServiceDebugInfo;
- (void)combinedStatusForUpdatesWithProductKeys:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)statusForUpdateWithProductKey:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)takeRequestsToInstallAfterPostLogoutUpdatesWithReply:(CDUnknownBlockType)arg1;
- (void)registerRequestsToInstallAfterPostLogoutUpdates:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)productKeysToAutomaticallyInstallLaterWithReply:(CDUnknownBlockType)arg1;
- (void)setAutomaticallyInstallLater:(BOOL)arg1 forProductKeys:(id)arg2 replyWhenDone:(CDUnknownBlockType)arg3;
- (void)adoptManualProductArchiveByReadingFromFileHandle:(id)arg1 archiveName:(id)arg2 displayName:(id)arg3 displayVersion:(id)arg4 allowDevSigning:(BOOL)arg5 replyWithResult:(CDUnknownBlockType)arg6;
- (void)stringRepresentationOfLongDescriptionForProductKey:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)commitLoginCredentials:(CDUnknownBlockType)arg1;
- (void)stashLoginCredentialsEnablingFLO:(BOOL)arg1 darkModeIsEnabled:(BOOL)arg2 reply:(CDUnknownBlockType)arg3;
- (void)productKeysToInstallAfterLogoutWithReply:(CDUnknownBlockType)arg1;
- (void)registerToInstallAfterLogoutForProductKeys:(id)arg1 nowIsLater:(BOOL)arg2 restartNow:(BOOL)arg3 reply:(CDUnknownBlockType)arg4;
- (void)_updateProductForPostLogoutInstallResultsNotification:(id)arg1 withStatus:(id)arg2;
- (void)_setProductsForPostLogoutInstallResultsNotification:(id)arg1 nowIsLater:(BOOL)arg2;
- (void)cancelUpdatesForProductKeys:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)startUpdatesForProductKeys:(id)arg1 usingClientAuthorization:(struct AuthorizationOpaqueRef *)arg2 holdingBoostDuringInstall:(BOOL)arg3 clientBlocksRestart:(BOOL)arg4 allowOnlyAppleSigned:(BOOL)arg5 packageScriptUserID:(unsigned int)arg6 sendingStatusUpdates:(BOOL)arg7 replyWhenDone:(CDUnknownBlockType)arg8;
- (void)startRootModeUpdatesForProductKeys:(id)arg1 clientBlocksRestart:(BOOL)arg2 replyWhenDone:(CDUnknownBlockType)arg3;
- (void)startUpdatesForProductKeys:(id)arg1 clientBlocksRestart:(BOOL)arg2 replyWhenDone:(CDUnknownBlockType)arg3;
- (void)startDownloadingForProductKeys:(id)arg1 replyWhenDone:(CDUnknownBlockType)arg2;
- (void)calculateDiskSpaceRequiredForUpdatesWithProductKeys:(id)arg1 downloadingOnly:(BOOL)arg2 reply:(CDUnknownBlockType)arg3;
- (void)buildTagCacheIfNecessaryWithReply:(CDUnknownBlockType)arg1;
- (void)markRampedUpdatesAsSeenWithReply:(CDUnknownBlockType)arg1;
- (void)clearAllHiddenUpdatesWithReply:(CDUnknownBlockType)arg1;
- (void)setHidden:(BOOL)arg1 forProductKeys:(id)arg2 replyWhenDone:(CDUnknownBlockType)arg3;
- (void)progressForRefreshOfAvailableUpdatesWithReply:(CDUnknownBlockType)arg1;
- (void)refreshAvailableUpdatesForCurrentConfigurationLimitedToProductKeys:(id)arg1 distributionEnvironment:(id)arg2 installedPrinters:(id)arg3 preferredLocalizations:(id)arg4 replyWhenDone:(CDUnknownBlockType)arg5;
- (void)refreshAvailableUpdates:(BOOL)arg1 preferredLocalizations:(id)arg2 replyWhenDone:(CDUnknownBlockType)arg3;
- (void)catalogInformationWithReply:(CDUnknownBlockType)arg1;
- (void)endTransactions;
- (void)takePostInstallNotificationsWithReply:(CDUnknownBlockType)arg1;
- (void)_performDownloadAndStageWithProductKeys:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)availableUpdatesOfType:(long long)arg1 withState:(long long)arg2 filteredByState:(long long)arg3 reply:(CDUnknownBlockType)arg4;
- (void)availableUpdatesOfType:(long long)arg1 withState:(long long)arg2 reply:(CDUnknownBlockType)arg3;
- (void)authorizeForUpdatingWithExternalFormData:(id)arg1 additionalTransactions:(unsigned long long)arg2 reply:(CDUnknownBlockType)arg3;
- (void)_saveCurrentState;
- (BOOL)_unarchiveStateFrom:(id)arg1;
- (id)_archivedState;
- (id)_currentClients;
- (void)startListeningForConnections;
- (void)schedulePeriodicActions;
- (void)_scheduleTransientBackgroundActionWithDelay:(long long)arg1 grace:(long long)arg2;
- (void)dealloc;
- (id)init;

@end

@interface SUUpdateSession : NSObject
{
    NSMutableDictionary *_updateStatusByKey;
    NSMutableDictionary *_initiatedDownloads;
    NSDictionary *_completeUpdatesByKey;
    struct dispatch_semaphore_s *_parallelDownloadSemaphore;
    NSMutableSet *_backgroundKeys;
    NSMutableDictionary *_initiatedInstalls;
    NSMutableDictionary *_factoredInstallSizeByKey;
    NSMutableDictionary *_downloadDoneBlocksByKey;
    NSMutableDictionary *_completionSemaphoreByKey;
    long long _foregroundTransactions;
    long long _backgroundTransactions;
    NSMutableDictionary *_assertionByTransactionID;
    struct dispatch_queue_s *_updateStatusQueue;
    struct dispatch_queue_s *_clientNotifyQueue;
    struct dispatch_queue_s *_transactionQueue;
    BOOL _isPreparingForReboot;
    BOOL _nowIsLater;
    BOOL _pendingStageInstallCancelled;
    CDUnknownBlockType _transactionCountDidChangeHandler;
    CDUnknownBlockType _installStateDidChangeHandler;
}

+ (id)sharedSession;
@property BOOL pendingStageInstallCancelled; // @synthesize pendingStageInstallCancelled=_pendingStageInstallCancelled;
@property BOOL nowIsLater; // @synthesize nowIsLater=_nowIsLater;
@property BOOL isPreparingForReboot; // @synthesize isPreparingForReboot=_isPreparingForReboot;
@property(copy) CDUnknownBlockType installStateDidChangeHandler; // @synthesize installStateDidChangeHandler=_installStateDidChangeHandler;
@property(copy) CDUnknownBlockType transactionCountDidChangeHandler; // @synthesize transactionCountDidChangeHandler=_transactionCountDidChangeHandler;
- (unsigned long long)diskSpaceRequiredForProducts:(id)arg1 includingInstall:(BOOL)arg2;
- (void)_stopTransactionWithID:(long long)arg1;
- (long long)_startTransactionForForeground:(BOOL)arg1 withProducts:(id)arg2 includingInstall:(BOOL)arg3;
- (long long)activeBackgroundTransactions;
- (long long)activeForegroundTransactions;
- (id)combinedStatusForUpdatesWithProductKeys:(id)arg1 individualStatus:(id *)arg2;
- (id)statusForUpdateWithProductKey:(id)arg1;
- (id)_nonatomicStatusForUpdateWithProductKey:(id)arg1 averageDownloadSpeed:(float *)arg2;
- (id)_updateStatusForProducts:(id)arg1;
- (void)_cancelBackgroundDownloadOperations;
- (void)cancelUpdatesForProductKeys:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)startUpdateForProducts:(id)arg1 usingClientAuthorization:(struct AuthorizationOpaqueRef *)arg2 inForeground:(BOOL)arg3 holdingBoostDuringInstall:(BOOL)arg4 stageInstall:(BOOL)arg5 clientBlocksRestart:(BOOL)arg6 allowOnlyAppleSigned:(BOOL)arg7 packageScriptUserID:(unsigned int)arg8 sendingStatusUpdates:(BOOL)arg9 replyWhenDone:(CDUnknownBlockType)arg10;
- (void)_installProducts:(id)arg1 authorization:(struct AuthorizationOpaqueRef *)arg2 holdingBoostDuringInstall:(BOOL)arg3 stageInstall:(BOOL)arg4 clientBlocksRestart:(BOOL)arg5 allowOnlyAppleSigned:(BOOL)arg6 packageScriptUserID:(unsigned int)arg7;
- (void)startDownloadingForProducts:(id)arg1 inForeground:(BOOL)arg2 replyWhenDone:(CDUnknownBlockType)arg3;
- (void)_startDownloadingUpdateWithProduct:(id)arg1 inForeground:(BOOL)arg2 forActivePhases:(long long)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)_finishStagingProduct:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (BOOL)_shouldResetStatus:(id)arg1 afterScan:(BOOL)arg2;
- (void)setupStatusForAvailableProducts:(id)arg1 afterScan:(BOOL)arg2;
- (void)_installStateDidChangeForKey:(id)arg1;
- (void)dumpDebugInfo;
- (void)resetState;
- (void)archiveToCoder:(id)arg1;
- (void)restoreFromCoder:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface SUScanController : NSObject
{
    NSMutableArray *_availableProducts;
    NSMutableDictionary *_productByKey;
    NSURL *_catalogURLFromPrefs;
    NSURL *_appleCatalogURLFromPrefs;
    NSURL *_catalogURL;
    int _catalogTrustLevel;
    NSArray *_preferredLocalizationsForLastClient;
    int _scanState;
    SUScan *_scanInProgress;
    NSError *_lastScanError;
    NSDate *_lastCmdRScanCompleted;
    struct dispatch_queue_s *_updateInfoQueue;
    struct dispatch_queue_s *_scanRefreshQueue;
    struct dispatch_queue_s *_scanStateQueue;
    struct dispatch_queue_s *_clientNotifyQueue;
    CDUnknownBlockType _availableProductsDidChangeHandler;
    CDUnknownBlockType _catalogURLDidChangeHandler;
}

+ (id)sharedScanController;
@property(copy) CDUnknownBlockType catalogURLDidChangeHandler; // @synthesize catalogURLDidChangeHandler=_catalogURLDidChangeHandler;
@property(copy) CDUnknownBlockType availableProductsDidChangeHandler; // @synthesize availableProductsDidChangeHandler=_availableProductsDidChangeHandler;
- (void)_handleUpdateWhitelistDidChangeNotification:(id)arg1;
- (void)populateTagCache:(CDUnknownBlockType)arg1;
- (void)removeInapplicableLocalProducts;
- (void)clearAllHidden;
- (void)setHidden:(BOOL)arg1 forProductKeys:(id)arg2;
- (BOOL)checkForChangeInCatalogURL;
- (void)markRampedUpdatesAsSeen;
- (void)_clearCriticalUpdateNotificationDateIfAppropriate;
- (void)removeAvailableProductsWithKeys:(id)arg1;
- (double)currentRefreshProgress;
- (BOOL)_wasSoftwareInstalledSinceLastScan;
- (void)_refreshAvailableUpdatesFromScan:(id)arg1;
- (void)refreshAvailableProductsInForeground:(BOOL)arg1 limitedToChanged:(BOOL)arg2 evenIfConfigurationChanged:(BOOL)arg3 limitedToProductKeys:(id)arg4 forCurrentConfiguration:(BOOL)arg5 distributionEnvironment:(id)arg6 installedPrinters:(id)arg7 preferredLocalizations:(id)arg8 finish:(CDUnknownBlockType)arg9;
- (id)availableProductsForKeys:(id)arg1;
- (id)availableProductForKey:(id)arg1;
- (id)_shortDescriptionOf:(id)arg1;
- (id)availableProducts;
- (BOOL)isAppleSeedCatalog;
- (BOOL)isDefaultAppleCatalog;
- (int)catalogTrustLevel;
- (id)catalogURL;
- (void)dumpDebugInfo;
- (void)resetState;
- (void)archiveToCoder:(id)arg1;
- (void)restoreFromCoder:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface SUBackgroundActions : NSObject
{
    NSMutableArray *_userVisibleUpdates;
    NSMutableArray *_configDataUpdates;
    NSMutableArray *_backgroundInstallCriticalUpdates;
    NSMutableArray *_registerForPostLogoutCriticalUpdates;
    NSSet *_previousIncompleteKeys;
    NSMutableSet *_errorUpdateKeys;
    long long _willAutoInstallNotifyCount;
    NSMutableArray *_willAutoInstallNotifyStrings;
    BOOL _timeToScan;
    BOOL _doCriticalAndConfigDataOnly;
    BOOL _canDownloadAndStage;
    BOOL _wasScanIncomplete;
    NSError *_error;
}

- (BOOL)shouldRetryAheadOfSchedule;
- (id)error;
- (id)incompleteProductKeys;
- (id)autoInstallNotificationStrings;
- (BOOL)countOfUpdatesAutoInstalled;
- (BOOL)markPendingCriticalUpdatesForPostLogoutInstallIfAppropriate;
- (BOOL)performAnyBackgroundInstallsAndWaitUntilDone;
- (BOOL)stageRecommendedUpdates;
- (BOOL)downloadRecommendedUpdates;
- (id)_appropriateProductsForAction:(long long)arg1;
- (BOOL)refreshAvailableUpdatesIfRequired;
- (BOOL)downloadAndStageUpdates:(id)arg1 withReply:(CDUnknownBlockType)arg2;
- (void)_evaluateAvailableUpdatesWithLogging:(BOOL)arg1;
- (BOOL)_canDownloadAndStageUpdates;
- (BOOL)_evaluateScanRequirements;
- (void)dealloc;
- (id)initWithPreviousIncompleteProductKeys:(id)arg1;

@end

@interface SUAppStoreAgentNotifier : NSObject
{
    NSXPCConnection *_connection;
    BOOL _postNotifyOnly;
    NSArray *_availableUpdates;
    NSArray *_installLaterKeys;
    NSArray *_postNotifyStrings;
    NSDictionary *_postLogoutInstallResults;
    long long _postNotifyCount;
    CDUnknownBlockType _logBlock;
}

@property(copy) CDUnknownBlockType logBlock; // @synthesize logBlock=_logBlock;
- (void)notifyAppStoreAgentAndWaitUntilDone:(id)arg1;
- (id)availableUpdateParameters;
- (void)_getUpdateInformationFromDaemon;
- (void)_log:(int)arg1 msg:(id)arg2;
- (void)dealloc;
- (id)initWithServiceConnection:(id)arg1 forPostInstallNotificationOnly:(BOOL)arg2;

@end

@interface SUSharedAuthenticationHandler : NSObject <PKURLAuthenticationHandler>
{
    NSMutableDictionary *_certValidatedByHost;
    struct dispatch_queue_s *_updateQueue;
    BOOL _evCheckingDisabledByPref;
    NSMutableArray *_disabledHosts;
}

+ (id)sharedHandler;
- (void)_setCertValidated:(BOOL)arg1 forHost:(id)arg2;
- (BOOL)certValidatedForURL:(id)arg1;
- (void)promptForAuthenticationChallenge:(id)arg1;
- (BOOL)isHostDiabledForEVCheck:(id)arg1;
- (void)disableHostForEVCheck:(id)arg1;
- (id)init;

@end

@interface _SUManualAdoptedProduct : SUProduct
{
}

- (void)_ensureDistributionBaseURLIsSet;
- (unsigned long long)downloadSize;
- (id)packageReferenceForPackageIdentifier:(id)arg1;

@end

@interface SUManualProductAdopterImpl : NSObject
{
    NSString *_archivePath;
    PKDistribution *_distribution;
    SUProduct *_adoptedProduct;
}

- (id)adoptedProduct;
- (void)_mungePackageURLsUnderChoice:(id)arg1;
- (BOOL)_mungeDistributionWithDisplayName:(id)arg1 displayVersion:(id)arg2 error:(id *)arg3;
- (BOOL)adoptWithDisplayName:(id)arg1 displayVersion:(id)arg2 allowDevSigning:(BOOL)arg3 error:(id *)arg4;
- (id)_pathByCopyingProductArchiveFromFileHandle:(id)arg1 archiveName:(id)arg2;
- (id)description;
- (void)dealloc;
- (id)initWithManualProductArchiveNamed:(id)arg1 readingFromFileHandle:(id)arg2 error:(id *)arg3;

@end

@interface SUSetupAssistantActions : NSObject
{
    NSXPCConnection *_connection;
}

+ (double)estimatedRunningTime;
- (void)runActionsWithProgressHandler:(CDUnknownBlockType)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_disconnectFromService;
- (BOOL)_connectToService;
- (void)dealloc;
- (id)init;

@end

@interface SUCatalogDataManager : NSObject
{
    NSString *_catalogEntityTag;
    NSMutableDictionary *_lastClientRetrievalPostDateByKey;
    BOOL _isDefaultAppleProductionCatalogURL;
    BOOL _isAppleSeedCatalogURL;
    SUCatalog *_catalog;
    NSString *_cachePathRoot;
    struct dispatch_semaphore_s *_inFlightSemaphore;
    struct dispatch_queue_s *_updateQueue;
    struct dispatch_queue_s *_loadQueue;
    struct dispatch_queue_s *_handlerQueue;
}

+ (id)sharedManager;
- (void)dumpDebugInfo;
- (void)resetState;
- (void)archiveToCoder:(id)arg1;
- (void)restoreFromCoder:(id)arg1;
- (void)_purgeChangedAndRemovedProductsFromCache;
- (void)_removeCacheForProduct:(id)arg1 reason:(id)arg2;
- (id)_cachePathForURL:(id)arg1 inProduct:(id)arg2;
- (id)_cachePathForProduct:(id)arg1;
- (void)invalidateResourcesForProduct:(id)arg1;
- (void)retrievePKMDataForProduct:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)undoRetrieveDistributionDataForProduct:(id)arg1;
- (void)retrieveDistributionDataForProduct:(id)arg1 preferredLocalizations:(id)arg2 withHandler:(CDUnknownBlockType)arg3;
- (void)_retrieveURL:(id)arg1 forProduct:(id)arg2 withHandler:(CDUnknownBlockType)arg3;
- (void)enumerateProductsWithHandler:(CDUnknownBlockType)arg1;
- (BOOL)isCurrentCatalogAppleSeed;
- (BOOL)isCurrentCatalogDefaultAppleProduction;
- (void)retrieveCatalogWithHandler:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)init;

@end

@interface SUProductForSUS : NSObject
{
    SUProduct *_product;
}

- (id)descriptionDataReturningMIMEType:(id *)arg1;
- (unsigned long long)downloadSize;
- (int)restartAction;
- (id)displayVersion;
- (id)displayName;
- (void)dealloc;
- (id)initWithProductKey:(id)arg1 catalogProductDictionary:(id)arg2 localization:(id)arg3 error:(id *)arg4;

@end

@interface KeychainMasterHandler : NSObject
{
    struct OpaqueSecKeychainRef *_keychainRef;
    long long _moduleHandle;
    int _errorStatus;
    NSString *_errorString;
}

- (BOOL)_checkStatus:(int)arg1 context:(id)arg2;
- (BOOL)prepareKeychainWithMasterKeyCredential:(id)arg1;
- (BOOL)prepareKeychainWithPasswordCredential:(id)arg1;
- (id)extractMasterKey;
- (id)errorString;
- (int)errorStatus;
- (void)dealloc;
- (id)initWithKeychain:(struct OpaqueSecKeychainRef *)arg1;

@end

@interface NSDictionary (CaseInsensitive)
- (id)objectForCaseInsensitiveKey:(id)arg1;
@end

@interface PKDistribution (SUAdditions)
+ (id)_softwareUpdateDistributionWithData:(id)arg1 error:(id *)arg2;
+ (id)_softwareUpdateDistributionWithContentsOfURL:(id)arg1 error:(id *)arg2;
- (id)auxinfo;
- (id)_softwareUpdateChoice;
- (id)_softwareUpdateInterfaceType;
- (void)_mungeInvisibleChoicesOutline;
@end

@interface PKDistributionController (SUAdditions)
- (void)_selectRootSoftwareUpdateChoice;
@end

@interface NSTask (Timeout)
- (int)_runWithTimeout:(double)arg1;
@end

@interface NSWorkspace (RestartAdditions)
- (BOOL)_shutdown;
- (BOOL)_restart;
- (BOOL)_logout;
- (BOOL)_sendAEToLoginWindow:(unsigned int)arg1 withFlags:(unsigned int)arg2;
@end

@interface NSAttributedString (SUAppExtras)
+ (id)_attributedStringWithData:(id)arg1 MIMEType:(id)arg2;
@end

@interface NSRunLoop (SUAdditions)
- (void)_runUntilCondition:(CDUnknownBlockType)arg1 periodicAction:(CDUnknownBlockType)arg2;
- (void)_runUntilCondition:(CDUnknownBlockType)arg1;
@end

@interface PKPackageReference (SUCatalogAdditions)
- (BOOL)_isSamePackageAs:(id)arg1;
@end

@interface PKPackageReference (SUCatalogAdditions)
- (BOOL)_isSamePackageAs:(id)arg1;
@end

