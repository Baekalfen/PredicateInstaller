/*
 *     Generated by class-dump 3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.
 */

#pragma mark Typedef'd Structures

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
} CDStruct_cc4e5495;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    char _field3[1];
} CDStruct_7d936526;

typedef struct {
    unsigned int _field1;
    CDStruct_cc4e5495 _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    CDStruct_7d936526 _field6;
} CDStruct_1031db52;

typedef struct {
    unsigned int _field1;
    CDStruct_cc4e5495 _field2;
    unsigned int _field3;
    CDStruct_7d936526 _field4;
} CDStruct_289ceabb;

#pragma mark -

/*
 * File: /System/Library/PrivateFrameworks/SoftwareUpdate.framework/Versions/A/SoftwareUpdate
 * UUID: 2F625407-A316-35E6-83F8-2B2DF5BE53E6
 * Arch: x86_64
 *       Current version: 472.0.0, Compatibility version: 1.0.0
 *       Source version: 472.0.0.0.0
 *       Minimum Mac OS X version: 10.8.0
 *       SDK version: 10.8.0
 *
 *       Objective-C Garbage Collection: Supported
 */

@protocol NSCoding
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
- (id)description;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(id)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (struct _NSZone *)zone;
- (id)self;
- (Class)class;
- (Class)superclass;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;

@optional
- (id)debugDescription;
@end

@protocol NSURLConnectionDelegate <NSObject>

@optional
- (void)connection:(id)arg1 didCancelAuthenticationChallenge:(id)arg2;
- (void)connection:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (BOOL)connection:(id)arg1 canAuthenticateAgainstProtectionSpace:(id)arg2;
- (void)connection:(id)arg1 willSendRequestForAuthenticationChallenge:(id)arg2;
- (BOOL)connectionShouldUseCredentialStorage:(id)arg1;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
@end

@protocol NSURLDownloadDelegate <NSObject>

@optional
- (void)download:(id)arg1 didFailWithError:(id)arg2;
- (void)downloadDidFinish:(id)arg1;
- (void)download:(id)arg1 didCreateDestination:(id)arg2;
- (void)download:(id)arg1 decideDestinationWithSuggestedFilename:(id)arg2;
- (BOOL)download:(id)arg1 shouldDecodeSourceDataOfMIMEType:(id)arg2;
- (void)download:(id)arg1 didReceiveDataOfLength:(unsigned long long)arg2;
- (void)download:(id)arg1 willResumeWithResponse:(id)arg2 fromByte:(long long)arg3;
- (void)download:(id)arg1 didReceiveResponse:(id)arg2;
- (BOOL)downloadShouldUseCredentialStorage:(id)arg1;
- (void)download:(id)arg1 didCancelAuthenticationChallenge:(id)arg2;
- (void)download:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (BOOL)download:(id)arg1 canAuthenticateAgainstProtectionSpace:(id)arg2;
- (id)download:(id)arg1 willSendRequest:(id)arg2 redirectResponse:(id)arg3;
- (void)downloadDidBegin:(id)arg1;
@end

@protocol NSUserNotificationCenterDelegate <NSObject>

@optional
- (BOOL)userNotificationCenter:(id)arg1 shouldPresentNotification:(id)arg2;
- (void)userNotificationCenter:(id)arg1 didActivateNotification:(id)arg2;
- (void)userNotificationCenter:(id)arg1 didDeliverNotification:(id)arg2;
@end

@protocol PKPackageSource
- (id)allPackageReferences;

@optional
- (id)packageReferencesMatchingIdentifier:(id)arg1 version:(id)arg2;
@end

@protocol PKURLAuthenticationHandler
- (void)promptForAuthenticationChallenge:(id)arg1;
@end

@protocol SUDaemon
- (id)productManager;
- (void)resetScan;
- (void)scanIfNeeded;
- (id)scan;
@end

@protocol SUHelperD
- (BOOL)restoreDefaultCatalog;
- (BOOL)clearCriticalUpdateNotificationDate;
- (BOOL)removeUpdatesAvailableCookie;
- (BOOL)createUpdatesAvailableCookie;
- (BOOL)setAutomaticCheckScheduled:(BOOL)arg1;
- (BOOL)setObject:(id)arg1 forAnyUserPreference:(id)arg2;
- (id)appsThatNeedToBeQuitFromBundleIDs:(id)arg1;
- (BOOL)removeSpecialModeCookie;
- (BOOL)createSpecialModeCookie:(id)arg1;
- (BOOL)cancelSessionLockBelowPriority:(int)arg1;
- (BOOL)releaseSessionLock:(id)arg1;
- (BOOL)acquireSessionLock:(id)arg1;
- (id)sessionLock;
- (BOOL)removeProductDirectoryForKey:(id)arg1;
- (BOOL)createDirectoryForProductKey:(id)arg1;
- (BOOL)removeDistForProductKey:(id)arg1 withFilename:(id)arg2;
- (BOOL)moveIndexToUpdatesFromPath:(id)arg1;
- (BOOL)removeIndexFromUpdates;
- (BOOL)movePPDVersionCacheToUpdatesFromPath:(id)arg1;
- (BOOL)moveMetadataCacheToUpdatesFromPath:(id)arg1;
- (BOOL)removeMetadataCacheFromUpdates;
- (BOOL)makeQueues;
- (BOOL)registerProductFile:(id)arg1 forProductKey:(id)arg2 trustLevel:(int *)arg3;
- (int)prepareForLogoutAndInstall;
- (void)authorizeTool:(struct AuthorizationOpaqueRef *)arg1 forRights:(long long)arg2;
@end

@protocol SUInstallOperationDelegate
- (void)installOperationDidEnd:(id)arg1;
- (void)installOperation:(id)arg1 currentStatus:(id)arg2 progress:(float)arg3 timeRemaining:(double)arg4;
- (void)installOperationDidBegin:(id)arg1;
@end

@protocol SUProductDownloadOperationDelegate
- (void)remoteProductDownloadOperationDidEnd:(id)arg1;
- (void)remoteProductDownloadOperationDidBeginDownloading:(id)arg1;
@end

@protocol SUSessionDelegate
- (void)session:(id)arg1 willEnd:(BOOL)arg2;
- (void)sessionDidBegin:(id)arg1;

@optional
- (void)session:(id)arg1 didCompleteProducts:(id)arg2;
- (void)session:(id)arg1 product:(id)arg2 didFailWithError:(id)arg3;
- (void)session:(id)arg1 productDidFinish:(id)arg2;
- (void)session:(id)arg1 currentStatus:(id)arg2 progress:(float)arg3;
- (void)session:(id)arg1 product:(id)arg2 didStateChange:(int)arg3;
- (int)session:(id)arg1 closeUserApplications:(id)arg2 othersApplications:(id)arg3;
- (int)session:(id)arg1 willCloseApplications:(id)arg2;
- (void)session:(id)arg1 couldNotAcquireLock:(id)arg2;
@end

@interface NSDirectoryServices : NSObject
{
    unsigned int _dirRef;
    NSArray *_nodes;
    unsigned int _nodeRef;
}

- (id)getRecordMatches:(id)arg1 andType:(id)arg2 fromNode:(id)arg3;
- (id)getRecordsOfType:(id)arg1 fromNode:(id)arg2;
- (id)getRecord:(id)arg1 andType:(id)arg2 fromNode:(id)arg3;
- (id)getNodes;
- (void)finalize;
- (void)dealloc;
- (id)init;
- (id)nameOfRecord:(CDStruct_289ceabb *)arg1 attributes:(unsigned int)arg2 withBuffer:(CDStruct_7d936526 *)arg3;
- (void)addEntry:(CDStruct_1031db52 *)arg1 withValue:(unsigned int)arg2 toDictionary:(id)arg3 withBuffer:(CDStruct_7d936526 *)arg4;
- (void)addRecordAtIndex:(unsigned int)arg1 toDictionary:(id)arg2 withBuffer:(CDStruct_7d936526 *)arg3;
- (BOOL)openNode:(id)arg1;

@end

@interface SUSClientUtilities : NSObject
{
    NSString *_portName;
    const struct __SCDynamicStore *_store;
}

+ (id)copyPrimaryIPAddress;
+ (id)_copyPrimaryService;
- (id)getMacAddress;
- (id)getHostName;
- (id)serialNumberString;
- (id)getIPAddress;
- (void)dealloc;
- (id)initWithPortName:(id)arg1;

@end

@interface SUCatalogFetch : NSObject
{
    NSDictionary *_catalogDictionary;
    NSURL *_finalURL;
    NSString *_previousEntityTag;
    BOOL _skipIfUnchanged;
    NSString *_currentEntityTag;
    BOOL _didUseDefaultURL;
    BOOL _didUseAppleDefaultProductionURL;
    NSError *_error;
}

+ (BOOL)isUsingAppleSeedCatalogURL;
+ (id)defaultAppleCatalogURL;
+ (id)appleCatalogURL;
+ (id)catalogURL;
- (id)error;
- (id)catalogEntityTag;
- (BOOL)isCatalogChanged;
- (BOOL)isDefaultAppleProductionCatalogURL;
- (BOOL)isDefaultAppleCatalogURL;
- (id)finalURL;
- (id)catalogDictionary;
- (void)dealloc;
- (id)init;
- (id)initWithURL:(id)arg1 previousEntityTag:(id)arg2 skipIfUnchanged:(BOOL)arg3;
- (id)_fetchCatalogDictionaryReturningError:(id *)arg1 finalURL:(id *)arg2 isAppleDefault:(char *)arg3 isAppleProductionDefault:(char *)arg4 usingURL:(id)arg5;
- (id)_fetchAppleCatalogDictionaryReturningError:(id *)arg1 finalURL:(id *)arg2 isAppleProductionDefault:(char *)arg3;
- (BOOL)_isEVCheckDisabled;
- (id)_fetchDictionaryFromURL:(id)arg1 returningError:(id *)arg2;

@end

@interface SUCatalog : NSObject
{
    NSURL *_catalogURL;
    NSDictionary *_dictionaryRepresentation;
}

- (id)extraInfoForProductKey:(id)arg1;
- (id)packageDictionariesForProductKey:(id)arg1;
- (id)distributionURLForProductKey:(id)arg1 localization:(id)arg2;
- (id)localizationsForProductKey:(id)arg1;
- (id)productDictionaryForProductKey:(id)arg1;
- (id)productKeys;
- (long long)catalogVersion;
- (id)dictionaryRepresentation;
- (id)catalogURL;
- (id)description;
- (void)dealloc;
- (id)initWithContentsOfURL:(id)arg1;
- (id)initWithDictionaryRepresentation:(id)arg1 catalogURL:(id)arg2;
- (id)productByLoadingDistributionForProductKey:(id)arg1 localization:(id)arg2 error:(id *)arg3;

@end

@interface SUProduct : NSObject <NSCoding, NSCopying>
{
    NSString *_productKey;
    PKDistribution *_distribution;
    NSDictionary *_extraInfo;
    NSMutableDictionary *_packageReferenceForPackageIdentifier;
    unsigned long long _installSize;
    PKDistributionController *_distributionController;
    PKDistributionChoice *_swuChoice;
    NSMutableDictionary *_private;
    NSDictionary *_packageInfoForPackageURL;
}

+ (void)setUsingSeedCatalog:(BOOL)arg1;
+ (BOOL)isUsingSeedCatalog;
+ (void)setCatalogVersion:(long long)arg1;
+ (long long)catalogVersion;
+ (id)_productKeysFromProducts:(id)arg1;
+ (BOOL)_willProductsRequireAuthorizationIfAdmin:(id)arg1;
+ (int)_installActionRequiredByProducts:(id)arg1;
+ (BOOL)_willProductsRequireLogout:(id)arg1;
+ (BOOL)_isCriticalWithExtraInfo:(id)arg1;
+ (id)__extendedValueForKey:(id)arg1 extraInfo:(id)arg2;
- (id)packageIdentifiersToInstall;
- (id)orderedPackageSpecifiersToInstall;
- (id)orderedPackageReferencesToInstall;
- (BOOL)_isActiveDistributionPackageReference:(id)arg1;
- (id)allSoftwareUpdatePackageReferences;
- (id)_allPackageReferencesUnderChoice:(id)arg1;
- (int)restartAction;
- (id)readmeDataReturningMIMEType:(id *)arg1;
- (id)licenseDataReturningMIMEType:(id *)arg1;
- (id)_resourceDataForKey:(id)arg1 returningMIMEType:(id *)arg2;
- (id)descriptionDataReturningMIMEType:(id *)arg1;
- (id)displayVersion;
- (id)displayName;
- (id)identifier;
- (id)choiceItem;
- (id)distributionController;
- (id)choice;
- (id)distribution;
- (id)productKey;
- (id)description;
- (void)didRegisterProductWithPackageSource;
- (BOOL)loadMetadataFromPackageDictionaries:(id)arg1 returningError:(id *)arg2;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)replacementObjectForPortCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithProductKey:(id)arg1 distribution:(id)arg2 distributionController:(id)arg3;
- (unsigned long long)installSize;
- (unsigned long long)_installSizeForPackageReference:(id)arg1;
- (unsigned long long)downloadSize;
- (id)packageURLs;
- (BOOL)hasInstallablePackages;
- (id)packageReferenceForPackageIdentifier:(id)arg1;
- (void)invalidatePackageIdentifierInCache:(id)arg1;
- (id)packageInfoForPackageURL:(id)arg1;
- (id)initWithProductKey:(id)arg1 catalogProductDictionary:(id)arg2 localization:(id)arg3 error:(id *)arg4;
- (id)_updateInfoDictionary;
- (unsigned long long)_installSizeWithPatchPadding;
- (void)_setExtraInfo:(id)arg1;
- (id)_extraInfo;
- (BOOL)_installsBundlePackages;
- (id)_disabledGroupID;
- (id)_labelVersion;
- (id)_label;
- (id)_customPostInstallNotifyURL;
- (id)_customPostInstallNotifyText;
- (id)_customPostInstallNotifyTitle;
- (BOOL)_shouldNotifyUserAfterAutoInstall;
- (id)_customCriticalText;
- (id)_customCriticalTitle;
- (BOOL)_shouldAutoInstallCriticalUpdateInBackgroundNow;
- (long long)_shouldAutoInstallCriticalUpdateWithDelayInHours;
- (BOOL)_isCritical;
- (BOOL)_isConfigData;
- (BOOL)_isRamped;
- (BOOL)_isRecommendedForStageOnly:(BOOL)arg1;
- (BOOL)_isRecommended;
- (BOOL)_isStaged;
- (BOOL)__isStagedIgnoringTestingPref;
- (long long)totalDownloadSize;
- (int)highestRestartAction;

@end

@interface SUCatalogPackageSource : SUPackageSource <PKPackageSource>
{
    NSMutableDictionary *_packageReferencesByProduct;
    SUCatalog *_catalog;
    NSMutableDictionary *_digestByPackageURLPath;
}

- (id)packageReferencesMatchingIdentifier:(id)arg1 version:(id)arg2;
- (id)allPackageReferences;
- (id)digestForPackageAtURLPath:(id)arg1;
- (id)description;
- (id)descriptionForProduct:(id)arg1;
- (void)dealloc;
- (BOOL)registerProduct:(id)arg1;
- (id)initWithCatalog:(id)arg1;
- (id)_packageDictionaryForProductKey:(id)arg1 matchingPackageURL:(id)arg2;

@end

@interface SUProductLoadOperation : NSOperation
{
    NSString *_productKey;
    NSURL *_distributionURL;
    NSArray *_packageDictionaries;
    NSArray *_packageSources;
    NSDictionary *extraInfo;
    NSPredicate *distributionPredicate;
    BOOL shouldBuildCacheOnly;
    NSData *_distributionData;
    SUProduct *_product;
    NSError *_error;
}

+ (void)initialize;
@property BOOL shouldBuildCacheOnly; // @synthesize shouldBuildCacheOnly;
@property(retain) NSPredicate *distributionPredicate; // @synthesize distributionPredicate;
@property(retain) NSDictionary *extraInfo; // @synthesize extraInfo;
- (id)error;
- (id)product;
- (BOOL)_isValidChoice:(id)arg1;
- (BOOL)evaluateProduct;
- (BOOL)loadDistribution;
- (void)main;
- (id)description;
- (void)dealloc;
- (id)initWithProductKey:(id)arg1 distributionURL:(id)arg2 packageDictionaries:(id)arg3 packageSources:(id)arg4;

@end

@interface SUScan : NSObject
{
    NSURL *catalogURL;
    NSString *preferredLocalization;
    NSPredicate *distributionPredicate;
    BOOL shouldBuildCacheOnly;
    NSArray *filteredProductKeys;
    BOOL excludeRampedIfUnseen;
    BOOL criticalUpdatesOnly;
    BOOL skipIfCatalogUnchanged;
    BOOL ignorePPDVersionCache;
    double _progressValue;
    BOOL _isCancelled;
    BOOL _isExecuting;
    BOOL _doingFilteredScan;
    BOOL _didSkipWithUnchangedCatalog;
    BOOL _didIgnoreUnseenRamped;
    int _operationsCount;
    int _operationsComplete;
    struct dispatch_queue_s *_stateQueue;
    NSArray *installableProducts;
    NSMutableArray *_packageSources;
    NSError *_error;
    NSURL *_overrideCatalogURL;
    BOOL _didLoadAllResourcesSuccessfully;
    int _priority;
    BOOL _lockStillValid;
}

+ (id)performSynchronousScanReturningError:(id *)arg1 resultCode:(int *)arg2;
+ (id)performSynchronousScanPreferringLocalization:(id)arg1 includeInactive:(BOOL)arg2 returningError:(id *)arg3 resultCode:(int *)arg4;
+ (int)_resultCodeFromScan:(id)arg1;
@property BOOL ignorePPDVersionCache; // @synthesize ignorePPDVersionCache;
@property BOOL skipIfCatalogUnchanged; // @synthesize skipIfCatalogUnchanged;
@property BOOL criticalUpdatesOnly; // @synthesize criticalUpdatesOnly;
@property BOOL excludeRampedIfUnseen; // @synthesize excludeRampedIfUnseen;
@property(retain) NSArray *filteredProductKeys; // @synthesize filteredProductKeys;
@property BOOL shouldBuildCacheOnly; // @synthesize shouldBuildCacheOnly;
@property(retain) NSPredicate *distributionPredicate; // @synthesize distributionPredicate;
@property(retain) NSString *preferredLocalization; // @synthesize preferredLocalization;
@property(retain) NSURL *catalogURL; // @synthesize catalogURL;
- (int)scanPriority;
- (void)setScanPriority:(int)arg1;
- (id)criticalProducts;
- (BOOL)hasCriticalProducts;
- (id)recommendedProductsToInstall;
- (BOOL)hasRecommendedProducts;
- (id)standardProducts;
- (BOOL)hasStandardProducts;
- (bycopy id)installableProducts;
- (BOOL)hasInstallableProducts;
- (bycopy id)visibleProducts;
- (BOOL)hasVisibleProducts;
- (BOOL)didLoadAllResourcesSuccessfully;
- (BOOL)didSkipWithUnchangedCatalog;
- (BOOL)didCancel;
- (id)error;
- (BOOL)isFinished;
- (double)progressValue;
- (BOOL)isExecuting;
- (void)performSynchronousScan;
- (void)cancel;
- (void)start;
- (void)_scanMain:(id)arg1;
- (id)_clientDescription;
- (void)finalize;
- (void)dealloc;
- (id)init;
- (void)_cleanupPreempted:(id)arg1;
- (id)_productsByScanningCatalog:(id)arg1 limitedToProductKeys:(id)arg2 withLastRecommendedIdentifiers:(id)arg3;
- (id)_recommendedConfigDataProductsToInstallWithLogging:(BOOL)arg1;
- (id)_recommendedProductsToInstallForPredicateModeWithLogging:(BOOL)arg1;
- (bycopy id)_overrideCatalogURL;

@end

@interface SUTestDefaults : NSObject
{
    NSString *_testMode;
}

+ (id)sharedDefaults;
- (int)requiredPackageTrustLevelForCurrentMode;
- (BOOL)okayToUseNonProductionModeForPredicate;
- (BOOL)inThirdPartyMode;
- (BOOL)inDevKeyMode;
- (BOOL)inProductionMode;
- (void)exitTestMode;
- (BOOL)attemptToEnterTestModeFromUserDefaults;
- (BOOL)attemptToEnterTestMode:(id)arg1;
- (void)dealloc;

@end

@interface SUSignedFlatPkg : NSObject
{
}

+ (int)verifyPackageAtPath:(id)arg1 minimumTrust:(int)arg2 error:(id *)arg3;

@end

@interface SUPublicKey : NSObject
{
}

+ (id)applePublicKeyData;
+ (id)applePublicKeyHeaderData;

@end

@interface SUTarSignedTarball : NSObject
{
}

+ (int)verifyTarSignedTarAtPath:(id)arg1 minimumTrust:(int)arg2 movePackageToPath:(id)arg3;
+ (BOOL)untarFile:(id)arg1 entry:(id)arg2 toDestination:(id)arg3 preservingOwnership:(BOOL)arg4;

@end

@interface SUGzipUtilities : NSObject
{
}

+ (id)dataByUncompressingGzipData:(id)arg1;

@end

@interface SUURLConnection : PKURLConnection
{
}

+ (id)sessionID;
+ (id)sendSynchronousRequest:(id)arg1 returningResponse:(id *)arg2 error:(id *)arg3;
+ (void)initialize;

@end

@interface SULocalProduct : SUProduct
{
    NSString *_productPath;
    NSDictionary *_packageReferences;
    NSMutableSet *_mustCloseAppsToInstallProduct;
    SUProduct *_remoteProduct;
}

@property(retain) SUProduct *remoteProduct; // @synthesize remoteProduct=_remoteProduct;
- (id)mustCloseAppsToInstallProduct;
- (id)packageReferenceForPackageIdentifier:(id)arg1;
- (unsigned long long)sizeAlreadyDownloadedFromProduct:(id)arg1;
- (BOOL)isCompletelyDownloadedFromProduct:(id)arg1;
- (id)_localPackageReferenceFromDistribution:(id)arg1;
- (BOOL)hasInstallablePackages;
- (id)distributionPath;
- (id)productPath;
- (void)dealloc;
- (id)initWithProductKey:(id)arg1 productPath:(id)arg2 error:(id *)arg3;

@end

@interface SUProductManagerIndexFile : NSObject
{
    NSString *_indexPath;
    NSMutableDictionary *_indexDict;
}

- (void)setDownloadComplete:(BOOL)arg1 forProductKey:(id)arg2;
- (BOOL)isDownloadCompleteForProductKey:(id)arg1;
- (void)setCatalogURLString:(id)arg1 trustNumber:(id)arg2;
- (id)catalogTrustNumber;
- (id)catalogURLString;
- (void)setUpdatingAllAtLogout:(BOOL)arg1;
- (BOOL)isUpdatingAllAtLogout;
- (void)setProductKeysToInstallAtLogout:(id)arg1;
- (id)productKeysToInstallAtLogout;
- (void)setPath:(id)arg1 forProductKey:(id)arg2;
- (id)pathForProductKey:(id)arg1;
- (id)allProductKeys;
- (void)dealloc;
- (BOOL)_flushIndexToDisk;
- (id)initWithPath:(id)arg1;

@end

@interface SUProductManager : NSObject
{
    id _indexFile;
}

+ (id)sharedUpdatesDirectory;
+ (id)suggestedPackagePathForFileName:(id)arg1 product:(id)arg2 createDirectoryIfNeeded:(BOOL)arg3;
+ (id)suggestedProductPathForProduct:(id)arg1 createDirectoryIfNeeded:(BOOL)arg2;
+ (id)defaultManager;
- (unsigned long long)downloadedSizeForProduct:(id)arg1;
- (id)packagePathForPackageURL:(id)arg1 product:(id)arg2;
- (id)productPathForProduct:(id)arg1;
- (BOOL)isProductFullyDownloaded:(id)arg1;
- (id)localProductForProduct:(id)arg1;
- (id)localProductsWithProductKeys:(id)arg1;
- (id)allConfigDataLocalProducts;
- (id)allLocalProducts;
- (id)allLocalProductKeys;
- (BOOL)unregisterLocalProductKey:(id)arg1;
- (BOOL)registerProduct:(id)arg1;
- (BOOL)createDirectoryForProduct:(id)arg1 error:(id *)arg2;
- (void)setOverrideCatalogURL:(id)arg1 withTrustLevel:(int)arg2;
- (int)overrideCatalogTrustLevel;
- (id)overrideCatalogURL;
- (void)synchronize;
- (void)dealloc;
- (id)init;
- (void)setUpdatingAllAtLogout:(BOOL)arg1;
- (BOOL)isUpdatingAllAtLogout;
- (id)productsToInstallAtLogout;
- (id)productKeysToInstallAtLogout;
- (id)_productForProductKey:(id)arg1;
- (void)setProductKeysToInstallAtLogout:(id)arg1;
- (void)setProductsToInstallAtLogout:(id)arg1;

@end

@interface SUDownloadAndVerifyOperation : NSOperation <NSURLConnectionDelegate>
{
    NSURL *_url;
    unsigned long long _expectedSize;
    NSString *_expectedDigest;
    NSString *_finalPath;
    NSError *_error;
    NSString *_productKey;
    SUURLDownload *_download;
    BOOL _isBusy;
}

- (id)error;
- (id)finalPath;
- (void)cancel;
- (void)main;
- (id)download;
- (id)url;
- (void)dealloc;
- (id)initWithURL:(id)arg1 expectedDownloadSize:(unsigned long long)arg2 expectedDigest:(id)arg3 productKey:(id)arg4;
- (id)processDownloadedFileAtPath:(id)arg1 expectedDownloadSize:(unsigned long long)arg2 expectedDigest:(id)arg3 error:(id *)arg4;
- (void)suDownload:(id)arg1 didFailWithError:(id)arg2;
- (void)suDownload:(id)arg1 didFinishWritingToPath:(id)arg2;
- (void)suDownload:(id)arg1 didProgressChange:(float)arg2;
- (void)suDownload:(id)arg1 didReceiveResponse:(id)arg2;
- (void)suDownload:(id)arg1 didCancelAuthenticationChallenge:(id)arg2;
- (void)suDownload:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (void)suDownloadDidBegin:(id)arg1;

@end

@interface SUURLDownload : NSObject <NSURLDownloadDelegate, NSURLConnectionDelegate>
{
    NSURLDownload *_download;
    id _delegate;
    long long _downloadedLength;
    long long _expectedLength;
    NSLock *_progressLock;
    NSMutableArray *_dates;
    NSMutableArray *_lengthNumbers;
    struct __CFRunLoop *_cfRunLoop;
}

- (double)estimatedTimeRemaining;
- (float)averageBytesPerSecond;
- (BOOL)_updateProgressData;
- (BOOL)_isLastDateWithinTimeInterval:(double)arg1;
- (long long)expectedContentLength;
- (long long)downloadedLength;
- (void)cancel;
- (void)dealloc;
- (id)initWithRequest:(id)arg1 delegate:(id)arg2;
- (void)download:(id)arg1 didFailWithError:(id)arg2;
- (void)downloadDidFinish:(id)arg1;
- (void)download:(id)arg1 didReceiveDataOfLength:(unsigned long long)arg2;
- (void)download:(id)arg1 willResumeWithResponse:(id)arg2 fromByte:(long long)arg3;
- (void)download:(id)arg1 didReceiveResponse:(id)arg2;
- (void)download:(id)arg1 didCancelAuthenticationChallenge:(id)arg2;
- (void)download:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (id)download:(id)arg1 willSendRequest:(id)arg2 redirectResponse:(id)arg3;
- (void)downloadDidBegin:(id)arg1;

@end

@interface SUURLDownloadCache : NSObject
{
}

+ (id)appCacheDirectory;
+ (id)_defaultDirectoryAttributes;
+ (id)_defaultFileAttributes;
+ (id)defaultCache;
- (BOOL)emptyCache;
- (void)setResumeData:(id)arg1 forURL:(id)arg2;
- (id)resumeDataForURL:(id)arg1;
- (unsigned long long)partialDownloadFileSizeForURL:(id)arg1;
- (id)partialDownloadPathForURL:(id)arg1;

@end

@interface SUInstallOperation : NSOperation
{
    NSArray *_localProducts;
    PKInstallRequest *_request;
    BOOL _clientBlocksRestart;
    BOOL _allowOnlyAppleSignedFlatPackages;
    id <SUInstallOperationDelegate><NSObject> delegate;
    BOOL _didPreflight;
    BOOL _isInstalling;
    int _state;
    unsigned long long _totalSize;
    NSString *_firmwareStatus;
    double _lastFirmwareUpdateProgress;
    NSDate *_firmwareUpdateStalledAt;
    NSError *_error;
    NSMutableArray *_productKeysToDelete;
}

+ (unsigned long long)adjustedInstallSize:(unsigned long long)arg1 forLocalProducts:(id)arg2;
+ (id)installOperationsWithLocalProducts:(id)arg1 forStaging:(BOOL)arg2;
+ (unsigned long long)_spaceRequiredForPossiblyStagedLocalProducts:(id)arg1;
+ (void)_enumerateProducts:(id)arg1 usingBlock:(id)arg2;
+ (BOOL)_isCurrentlyStagedWithLocalProducts:(id)arg1 purgeableSize:(id *)arg2;
@property BOOL allowOnlyAppleSignedFlatPackages; // @synthesize allowOnlyAppleSignedFlatPackages=_allowOnlyAppleSignedFlatPackages;
@property BOOL clientBlocksRestart; // @synthesize clientBlocksRestart=_clientBlocksRestart;
@property id <SUInstallOperationDelegate><NSObject> delegate; // @synthesize delegate;
- (void)installClientDidFinish:(id)arg1;
- (void)installClient:(id)arg1 didFailWithError:(id)arg2;
- (void)installClient:(id)arg1 currentState:(int)arg2 package:(id)arg3 progress:(double)arg4 timeRemaining:(double)arg5;
- (id)productsForError;
- (id)error;
- (BOOL)performPreflightChecks;
- (BOOL)_performInstallTimeChecks;
- (void)main;
- (void)_dispatchStatus:(id)arg1 progress:(float)arg2 timeRemaining:(double)arg3;
- (void)removeInstalledOrInapplicableProducts;
- (unsigned long long)totalInstallSize;
- (id)localProducts;
- (void)dealloc;
- (id)_initWithLocalProducts:(id)arg1 stageOnly:(BOOL)arg2 spaceRequired:(unsigned long long)arg3;

@end

@interface SUDaemon : NSObject <SUDaemon>
{
    SUScan *_scan;
}

+ (id)sharedDaemon;
- (id)productManager;
- (void)resetScan;
- (void)scanIfNeeded;
- (id)scan;
- (void)dealloc;

@end

@interface SUSessionError : NSObject
{
}

+ (id)localizedDescriptionFromError:(id)arg1;
+ (id)errorWithCode:(int)arg1 title:(id)arg2 message:(id)arg3;
+ (id)errorWithCode:(int)arg1 path:(id)arg2 destination:(id)arg3;

@end

@interface SUSharedAuthorization : NSObject
{
}

+ (void)releaseAdminAuthorization;
+ (struct AuthorizationOpaqueRef *)adminAuthorizationForBackground:(BOOL)arg1;
+ (struct AuthorizationOpaqueRef *)adminAuthorization;
+ (BOOL)registerAdminAuthorization:(struct AuthorizationOpaqueRef *)arg1;
+ (BOOL)_authorizeForBackground:(BOOL)arg1;
+ (BOOL)_copyRightsForBackground;
+ (BOOL)_copyRightsForForeground;
+ (BOOL)_isRoleUser;

@end

@interface SUSession : NSObject
{
    NSArray *_products;
    NSString *_downloadDirectory;
    int _options;
    id <NSObject><SUSessionDelegate> _delegate;
    id _private;
}

+ (BOOL)preauthorizeForInstallationOfProducts:(id)arg1;
+ (id)userDownloadsDirectory;
+ (unsigned long long)diskSizeAvailableOnVolume:(id)arg1;
+ (unsigned long long)diskSizeFreeOnVolume:(id)arg1;
+ (unsigned long long)workingSpaceForInstallSize:(unsigned long long)arg1;
+ (unsigned long long)diskSizeRequiredForProducts:(id)arg1 doesInstall:(BOOL)arg2;
- (BOOL)doesInstall;
- (void)retryCloseApplications;
- (id)combinedErrorMessage;
- (id)combinedErrorTitle;
- (id)failedProducts;
- (BOOL)didFail;
- (BOOL)didCancel;
- (void)cancel;
- (void)start;
- (id)delegate;
- (void)setDelegate:(id)arg1;
- (int)options;
- (id)products;
- (void)dealloc;
- (id)initWithProducts:(id)arg1 options:(int)arg2 delegate:(id)arg3;
- (void)_sessionMain:(id)arg1;
- (void)sessionWillEnd;
- (void)sessionDidCompleteProducts:(id)arg1;
- (void)sessionDidCancel;
- (void)sessionDidBegin;
- (void)_dispatchDelegateCallbackOnMainThread:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3 withObject:(id)arg4;
- (void)_dispatchDelegateCallbackOnMainThread:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (void)_dispatchDelegateCallbackOnMainThread:(SEL)arg1 withObject:(id)arg2;
- (void)__performCallbackWithArguments:(id)arg1;
- (id)_sessionLock;
- (double)_estimatedTimeRemainingForCurrentState;
- (int)_currentStateCode;
- (unsigned long long)_totalDownloadLength;
- (unsigned long long)_currentDownloadLength;
- (float)_currentAverageBytesPerSecond;

@end

@interface SUSessionImpl : NSObject <SUProductDownloadOperationDelegate, SUInstallOperationDelegate>
{
    SUSession *_session;
    unsigned long long finishedDownloadLength;
    unsigned long long totalDownloadLength;
    unsigned long long finishedInstallSize;
    unsigned long long totalInstallSize;
    float lastProgress;
    int currentStateCode;
    double lastInstallEstimate;
    SUProductDownloadOperation *_productDownloadOp;
    NSTimer *_progressTimer;
    float savedCurrentAverageBytesPerSecond;
    long long _indeterminacyRequests;
    PKTimeRemainingFormatter *_timeRemainingFormatter;
    struct dispatch_semaphore_s *_closeAppsWaitSemaphore;
    NSMutableDictionary *_productToErrorDict;
    BOOL _isCancelled;
    SUSessionLock *_sessionLock;
}

@property double lastInstallEstimate; // @synthesize lastInstallEstimate;
@property int currentStateCode; // @synthesize currentStateCode;
@property float savedCurrentAverageBytesPerSecond; // @synthesize savedCurrentAverageBytesPerSecond;
@property float lastProgress; // @synthesize lastProgress;
@property unsigned long long totalInstallSize; // @synthesize totalInstallSize;
@property unsigned long long finishedInstallSize; // @synthesize finishedInstallSize;
@property unsigned long long totalDownloadLength; // @synthesize totalDownloadLength;
@property unsigned long long finishedDownloadLength; // @synthesize finishedDownloadLength;
- (void)_sendProduct:(id)arg1 didStateChange:(int)arg2;
- (void)installOperationDidEnd:(id)arg1;
- (void)installOperation:(id)arg1 currentStatus:(id)arg2 progress:(float)arg3 timeRemaining:(double)arg4;
- (void)installOperationDidBegin:(id)arg1;
- (void)remoteProductDownloadOperationDidEnd:(id)arg1;
- (void)_remoteProductDownloadTimerFired:(id)arg1;
- (void)remoteProductDownloadOperationDidBeginVerifying:(id)arg1;
- (void)remoteProductDownloadOperationDidBeginDownloading:(id)arg1;
- (void)retryCloseApplications;
- (BOOL)_ensureApplicationsAreNotRunning:(id)arg1;
- (void)_updateCurrentStatus:(id)arg1 withCurrentOperationProgress:(unsigned long long)arg2 isDeterminate:(BOOL)arg3;
- (id)productDownloadOp;
- (id)combinedErrorMessage;
- (id)combinedErrorTitle;
- (void)_registerError:(id)arg1 forProducts:(id)arg2 installing:(BOOL)arg3;
- (BOOL)didFail;
- (void)cancel;
- (id)installAllProductsSync:(id)arg1;
- (id)downloadAndVerifyAllProductsSync:(id)arg1;
- (void)dealloc;
- (id)initWithSession:(id)arg1;

@end

@interface SUProductDownloadOperation : NSOperation
{
    SUProduct *_product;
    id delegate;
    unsigned long long _totalLength;
    unsigned long long _finishedLength;
    SUDownloadAndVerifyOperation *_downloadOp;
    BOOL _isCancelled;
    NSError *_error;
}

@property id delegate; // @synthesize delegate;
- (id)error;
- (float)averageBytesPerSecond;
- (double)progress;
- (unsigned long long)totalLength;
- (unsigned long long)currentLength;
- (void)cancel;
- (void)main;
- (id)product;
- (void)dealloc;
- (id)initWithProduct:(id)arg1;

@end

@interface SUCatalogLoader : NSObject
{
}

+ (id)productByLoadingWithProductKey:(id)arg1 productDictionary:(id)arg2 localization:(id)arg3 baseURL:(id)arg4 overrideBaseURL:(id)arg5 error:(id *)arg6;

@end

@interface SUScanPrefManager : NSObject
{
    Class _helperProxyClass;
}

+ (id)sharedManager;
+ (id)_currentSystemVersion;
- (id)init;
- (BOOL)shouldAutoInstallCriticalUpdatesNowForDelay:(long long)arg1;
- (BOOL)shouldInvertStagedAndActiveStatesForTestingOnProduction;
- (BOOL)okayToUseThirdPartyTestMode;
- (BOOL)shouldConsiderOnlyStagedUpdates;
- (void)setInactiveProductLabels:(id)arg1;
- (id)inactiveProductLabels;
- (BOOL)shouldCriticalCheckFireNow;
- (BOOL)shouldCheckFireNow;
- (void)updatePrefsIfNeeded;
- (void)setAutomaticCriticalUpdateInstall:(BOOL)arg1;
- (BOOL)doesAutomaticCriticalUpdateInstall;
- (void)setAutomaticConfigDataInstall:(BOOL)arg1;
- (BOOL)doesAutomaticConfigDataInstall;
- (void)setBackgroundDownload:(BOOL)arg1;
- (BOOL)doesBackgroundDownload;
- (int)checkScheduledFrequency;
- (void)setCheckScheduled:(BOOL)arg1;
- (BOOL)isCheckScheduled;
- (void)setDidRegisterLocalUpdates:(BOOL)arg1;
- (BOOL)didRegisterLocalUpdates;
- (void)setIgnoringUnseenRampedUpdates:(BOOL)arg1;
- (BOOL)ignoringUnseenRampedUpdates;
- (void)setLastCheckAttemptSystemVersion;
- (id)lastCheckAttemptSystemVersion;
- (void)removeAllRecommendedUpdates;
- (void)removeRecommendedUpdates:(id)arg1;
- (void)addRecommendedUpdates:(id)arg1;
- (void)setRecommendedUpdates:(id)arg1;
- (id)recommendedUpdates;
- (long long)lastRecommendedUpdatesAvailable;
- (long long)lastUpdatesAvailable;
- (void)setLastCheckResultCode:(int)arg1;
- (int)lastCheckResultCode;
- (void)setLastCriticalCheckSuccessfulCatalogEntityTag:(id)arg1;
- (id)lastCriticalCheckSuccessfulCatalogEntityTag;
- (void)setLastCriticalCheckSuccessfulDate:(id)arg1;
- (id)lastCriticalCheckSuccessfulDate;
- (void)setLastCheckSuccessfulCatalogEntityTag:(id)arg1;
- (id)lastCheckSuccessfulCatalogEntityTag;
- (void)setLastBackgroundCheckSuccessfulDate:(id)arg1;
- (id)lastBackgroundCheckSuccessfulDate;
- (void)setLastCheckSuccessfulDate:(id)arg1;
- (id)lastCheckSuccessfulDate;
- (void)setLastCheckAttemptDate:(id)arg1;
- (id)lastCheckAttemptDate;
- (void)setShouldSkipContentLocator:(BOOL)arg1;
- (BOOL)shouldSkipContentLocator;
- (void)setLastSessionCompletedSuccessfully:(BOOL)arg1;
- (BOOL)lastSessionCompletedSuccessfully;
- (void)setObject:(id)arg1 forAnyUserPreference:(id)arg2;
- (id)objectForAnyUserPreference:(id)arg1;
- (BOOL)isValidAnyUserPreference:(id)arg1;

@end

@interface SUPredicateInstallController : NSObject
{
    NSMutableDictionary *_resources;
    id <NSObject><SUPredicateInstallControllerDelegate> _delegate;
    NSDate *_lastCacheRefreshAttempt;
    NSTask *_currentTask;
}

+ (id)_localizedErrorForCode:(int)arg1;
- (BOOL)_isSoftwareUpdateRunningWithPID:(id)arg1;
- (void)_softwareUpdateDidExitWithCode:(id)arg1;
- (void)_softwareUpdateDidExit:(id)arg1;
- (BOOL)_startSoftwareUpdateWithOptionsFile:(id)arg1;
- (id)_writeOptionsFileForPredicate:(id)arg1 confirmComplete:(BOOL)arg2;
- (BOOL)_isUpdateUIAlreadyRunning;
- (id)_optionsFilePath;
- (BOOL)startUpdateUIWithPredicate:(id)arg1 customTitle:(id)arg2 customIconPath:(id)arg3 assumeExist:(BOOL)arg4 confirmComplete:(BOOL)arg5;
- (BOOL)startUpdateUIWithPredicate:(id)arg1 confirmComplete:(BOOL)arg2;
- (id)metadataOfCachedProductsMatchingPredicate:(id)arg1;
- (id)tagsOfCachedProductsMatchingPredicate:(id)arg1;
- (long long)countOfCachedProductsMatchingPredicate:(id)arg1;
- (BOOL)isCacheCurrent;
@property BOOL requireLicenseAgreement;
@property int legalTextType;
@property(copy) NSURL *helpURL;
@property(copy) NSString *helpAnchor;
@property(copy) NSString *notFoundMessage;
@property(copy) NSString *busyMessage;
@property(copy) NSString *busyTitle;
@property(copy) NSString *noServerMessage;
@property(copy) NSString *noServerTitle;
@property(copy) NSString *noNetworkMessage;
@property(copy) NSString *noNetworkTitle;
@property(copy) NSString *title;
@property(copy) NSString *iconPath;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1;

@end

@interface SUMetadataCache : NSObject
{
    NSString *_cachePath;
    NSMutableArray *_metadata;
    double _cacheAge;
}

+ (BOOL)isCacheCurrent;
+ (id)sharedCache;
- (BOOL)writeCacheToDisk;
- (id)cachedProductKeysMatchingPredicate:(id)arg1;
- (id)metadataMatchingPredicate:(id)arg1;
- (id)_metadataMatchingPredicate:(id)arg1 pruningProductKeys:(BOOL)arg2;
- (BOOL)addMetadataFromDistribution:(id)arg1 forProductKey:(id)arg2;
- (void)clearCache;
- (double)existingCacheAge;
- (void)dealloc;
- (id)init;

@end

@interface SUPrinterScan : NSObject
{
}

+ (BOOL)runMakequeues;

@end

@interface SUHelperProxy : NSObject <SUHelperD>
{
    unsigned int _suhelperd_port;
    unsigned int _client_port;
    long long _currentRights;
    struct dispatch_queue_s *_q;
}

+ (id)sharedProxyIfAvailable;
+ (id)sharedProxy;
- (BOOL)_launchDaemonMode;
- (BOOL)restoreDefaultCatalog;
- (BOOL)clearCriticalUpdateNotificationDate;
- (BOOL)removeUpdatesAvailableCookie;
- (BOOL)createUpdatesAvailableCookie;
- (BOOL)setAutomaticCheckScheduled:(BOOL)arg1;
- (BOOL)setObject:(id)arg1 forAnyUserPreference:(id)arg2;
- (id)appsThatNeedToBeQuitFromBundleIDs:(id)arg1;
- (BOOL)removeSpecialModeCookie;
- (BOOL)createSpecialModeCookie:(id)arg1;
- (BOOL)cancelSessionLockBelowPriority:(int)arg1;
- (BOOL)releaseSessionLock:(id)arg1;
- (BOOL)acquireSessionLock:(id)arg1;
- (id)sessionLock;
- (BOOL)removeProductDirectoryForKey:(id)arg1;
- (BOOL)removeDistForProductKey:(id)arg1 withFilename:(id)arg2;
- (BOOL)createDirectoryForProductKey:(id)arg1;
- (BOOL)moveIndexToUpdatesFromPath:(id)arg1;
- (BOOL)removeIndexFromUpdates;
- (BOOL)movePPDVersionCacheToUpdatesFromPath:(id)arg1;
- (BOOL)moveMetadataCacheToUpdatesFromPath:(id)arg1;
- (BOOL)removeMetadataCacheFromUpdates;
- (BOOL)makeQueues;
- (BOOL)registerProductFile:(id)arg1 forProductKey:(id)arg2 trustLevel:(int *)arg3;
- (int)prepareForLogoutAndInstall;
- (void)authorizeWithEmptyAuthorizationForRights:(long long)arg1;
- (BOOL)disconnect;
- (void)authorizeTool:(struct AuthorizationOpaqueRef *)arg1 forRights:(long long)arg2;
- (void)finalize;
- (void)dealloc;
- (id)init;
- (BOOL)isAuthorizedForRights:(long long)arg1;
- (BOOL)_isAuthorized;

@end

@interface SUHelper : NSObject <SUHelperD>
{
    NSMutableDictionary *_clientPIDByPort;
    NSMutableDictionary *_clientRightsByPort;
    unsigned int _suhelper_service_port;
    unsigned int _port_set;
    SUSessionLock *_sessionLock;
    struct dispatch_queue_s *_client_management_queue;
}

- (BOOL)restoreDefaultCatalog;
- (BOOL)clearCriticalUpdateNotificationDate;
- (BOOL)removeUpdatesAvailableCookie;
- (BOOL)createUpdatesAvailableCookie;
- (id)appsThatNeedToBeQuitFromBundleIDs:(id)arg1;
- (BOOL)setAutomaticCheckScheduled:(BOOL)arg1;
- (BOOL)setObject:(id)arg1 forAnyUserPreference:(id)arg2;
- (BOOL)removeSpecialModeCookie;
- (BOOL)createSpecialModeCookie:(id)arg1;
- (BOOL)cancelSessionLockBelowPriority:(int)arg1;
- (BOOL)releaseSessionLock:(id)arg1;
- (BOOL)acquireSessionLock:(id)arg1;
- (id)sessionLock;
- (BOOL)removeProductDirectoryForKey:(id)arg1;
- (BOOL)removeDistForProductKey:(id)arg1 withFilename:(id)arg2;
- (BOOL)createDirectoryForProductKey:(id)arg1;
- (BOOL)moveIndexToUpdatesFromPath:(id)arg1;
- (BOOL)removeIndexFromUpdates;
- (BOOL)movePPDVersionCacheToUpdatesFromPath:(id)arg1;
- (BOOL)moveMetadataCacheToUpdatesFromPath:(id)arg1;
- (BOOL)removeMetadataCacheFromUpdates;
- (BOOL)makeQueues;
- (BOOL)registerProductFile:(id)arg1 forProductKey:(id)arg2 trustLevel:(int *)arg3;
- (int)prepareForLogoutAndInstall;
- (void)authorizeTool:(struct AuthorizationOpaqueRef *)arg1 forRights:(long long)arg2;
- (long long)_authorizeTool:(struct AuthorizationOpaqueRef *)arg1 clientUID:(unsigned int)arg2 pid:(int)arg3 forRights:(long long)arg4;
- (BOOL)_isPrefHelperTool:(int)arg1;
- (BOOL)_isAdminUser:(unsigned int)arg1;
- (void)_removeClientPort:(unsigned int)arg1;
- (void)_extendClientPort:(unsigned int)arg1 withRights:(long long)arg2;
- (unsigned int)_vendMachPortForPID:(int)arg1 forRights:(long long)arg2;
- (BOOL)_isClientPort:(unsigned int)arg1 validForRight:(long long)arg2;
- (int)run;
- (void)finalize;
- (void)dealloc;
- (id)init;
- (id)_trustFilePath;
- (BOOL)_securelyMoveFileAndSetPermissionsFrom:(id)arg1 to:(id)arg2;
- (id)_sharedPathForProductKey:(id)arg1 createIfMissing:(BOOL)arg2;
- (BOOL)_isSaneProductKey:(id)arg1;
- (int)_ensureUpdatesDirectoryExists;

@end

@interface SUSessionLock : NSObject
{
    unsigned int _clientUID;
    int _processID;
    int _priority;
    NSString *_uuid;
}

- (void)_postNotificationName:(id)arg1;
- (void)notifyPreempted;
- (void)notifyReleased;
- (void)notifyAcquired;
- (BOOL)isSameOwner:(id)arg1;
- (BOOL)isMine;
- (id)processName;
- (id)uuid;
- (int)priority;
- (int)processID;
- (unsigned int)clientUID;
- (id)description;
- (void)dealloc;
- (id)initWithClientUID:(unsigned int)arg1 processID:(int)arg2 priority:(int)arg3 uuid:(id)arg4;
- (id)initWithNotificationUserInfo:(id)arg1;
- (id)initWithPriority:(int)arg1;

@end

@interface SUProcess : NSObject
{
    BOOL isForeground;
    NSString *bundlePath;
    NSString *bundleIdentifier;
    NSString *applicationName;
    NSString *executablePath;
    NSString *localizedApplicationName;
    int pid;
    unsigned int ruid;
    BOOL wasQuit;
}

+ (id)allProcesses;
- (id)description;
- (BOOL)wasQuit;
- (BOOL)quitProcess;
- (id)encodeAsPropertyList;
- (unsigned int)uid;
- (int)pid;
- (id)localizedApplicationName;
- (id)applicationName;
- (id)executablePath;
- (id)bundleIdentifier;
- (id)bundlePath;
- (BOOL)isForeground;
- (void)dealloc;
- (id)initWithDictionary:(id)arg1;
- (id)initWithPID:(int)arg1;

@end

@interface SUDevKey : NSObject
{
}

+ (id)devKeyData;
+ (id)devKeyHeaderData;
+ (BOOL)canLoadDevKey;
+ (BOOL)_loadDevKeyIfNeeded;

@end

@interface SUSoftwareUpdateController : NSObject
{
    SUScan *_scan;
    SUSession *_session;
    id <SUSoftwareUpdateControllerDelegate> _delegate;
    NSString *_localizedProductName;
    SUPowerSourceMonitor *_powerMonitor;
    SUReachabilityMonitor *_reachabilityMonitor;
    BOOL _requireACPower;
    NSError *_lastCantStartError;
    NSDate *_lastCacheRefreshAttempt;
    struct dispatch_queue_s *_updateQueue;
    double _progressPercentage;
    int _currentState;
    double _estimatedTimeForCurrentState;
    double _currentProgressFraction;
    struct dispatch_source_s *_timerSource;
    SUOpenApplicationsUI *_openAppsUI;
    NSError *_sessionError;
    BOOL _isSessionRunning;
}

@property(readonly) int currentState; // @synthesize currentState=_currentState;
@property(readonly) double estimatedTimeForCurrentState; // @synthesize estimatedTimeForCurrentState=_estimatedTimeForCurrentState;
@property(readonly) double progressPercentage; // @synthesize progressPercentage=_progressPercentage;
@property BOOL requireACPower; // @synthesize requireACPower=_requireACPower;
- (id)_errorWithCode:(int)arg1 userInfo:(id)arg2 underlyingError:(id)arg3 recoveryAction:(id)arg4;
- (void)session:(id)arg1 willEnd:(BOOL)arg2;
- (void)session:(id)arg1 product:(id)arg2 didFailWithError:(id)arg3;
- (int)session:(id)arg1 closeUserApplications:(id)arg2 othersApplications:(id)arg3;
- (int)session:(id)arg1 willCloseApplications:(id)arg2;
- (void)session:(id)arg1 currentStatus:(id)arg2 progress:(float)arg3;
- (void)session:(id)arg1 product:(id)arg2 didStateChange:(int)arg3;
- (void)session:(id)arg1 couldNotAcquireLock:(id)arg2;
- (void)sessionDidBegin:(id)arg1;
- (BOOL)_runSessionForPredicate:(id)arg1;
- (BOOL)_scanWithPredicate:(id)arg1;
- (id)_errorWithBlockingLock:(id)arg1;
- (void)_updateCanStartUpdate:(id)arg1;
- (void)_notifyUpdateEndedWithError:(id)arg1 didCancel:(BOOL)arg2;
- (void)_notifyCanUpdateChanged;
- (id)_catalogURLReturningIsApple:(char *)arg1;
- (void)_setAndNotifyEstimatedTimeForCurrentState:(double)arg1;
- (void)_clearAndNotifyProgressPercentage;
- (void)_setAndNotifyProgressPercentage:(double)arg1;
- (void)_setAndNotifyCurrentState:(int)arg1;
- (BOOL)cancelUpdate;
@property(readonly) BOOL canCancelUpdate;
- (void)startUpdateInBackgroundWithPredicate:(id)arg1;
- (id)metadataOfCachedProductsMatchingPredicate:(id)arg1;
- (id)tagsOfCachedProductsMatchingPredicate:(id)arg1;
- (long long)countOfCachedProductsMatchingPredicate:(id)arg1;
- (BOOL)isCacheCurrent;
- (BOOL)_canStartUpdateWithPredicate:(id)arg1 error:(id *)arg2;
- (BOOL)canStartUpdateReturningError:(id *)arg1;
@property(readonly) BOOL canStartUpdate;
- (BOOL)setAuthorization:(struct AuthorizationOpaqueRef *)arg1;
- (void)finalize;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1 localizedProductName:(id)arg2;

@end

@interface SUSoftwareUpdateErrorHandler : NSObject
{
    int _code;
    id _action;
}

- (void)attemptRecoveryFromError:(id)arg1 optionIndex:(unsigned long long)arg2 delegate:(id)arg3 didRecoverSelector:(SEL)arg4 contextInfo:(void *)arg5;
- (BOOL)attemptRecoveryFromError:(id)arg1 optionIndex:(unsigned long long)arg2;
- (void)_launchNetworkDiagnosticsForError:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (void)dealloc;
- (id)initWithErrorCode:(int)arg1 action:(id)arg2;

@end

@interface SUPowerSourceMonitor : NSObject
{
    struct __CFRunLoopSource *_powerRunLoopSource;
    struct dispatch_queue_s *_notifyQueue;
    id _notifyBlock;
}

+ (BOOL)isSafeToAutoInstallGivenCurrentPowerSources;
+ (BOOL)isRunningOnACPower;
- (void)_stopObservingPowerSource;
- (void)_startObservingPowerSource;
- (void)_handleChangeInPowerSource;
- (void)stop;
- (void)start;
- (void)finalize;
- (void)dealloc;
- (id)initWithQueue:(struct dispatch_queue_s *)arg1 usingBlock:(id)arg2;

@end

@interface SUOpenApplicationsUI : NSObject
{
    SUSession *_session;
    NSString *_localizedProductName;
}

- (void)_didReturnToConsoleAfterSwitchUser:(id)arg1;
- (id)_userNamesForProcesses:(id)arg1;
- (id)_applicationNamesForProcesses:(id)arg1;
- (int)session:(id)arg1 closeUserApplications:(id)arg2 othersApplications:(id)arg3;
- (int)session:(id)arg1 willCloseApplications:(id)arg2;
- (void)dealloc;
- (id)initWithLocalizedProductName:(id)arg1;

@end

@interface SUReachabilityMonitor : NSObject
{
    struct __SCNetworkReachability *_reachability;
    struct dispatch_queue_s *_notifyQueue;
    NSString *_hostName;
    NSString *_directHostName;
    BOOL _observing;
    id _notifyBlock;
}

+ (id)_directHostToCheckConsideringProxy:(id)arg1;
+ (BOOL)_isHostReachableWithFlags:(unsigned int)arg1;
+ (BOOL)isHostReachable:(id)arg1;
- (void)_handleChangeInReachability:(unsigned int)arg1;
- (void)_stopListeningForReachabilityChanges;
- (BOOL)_startListeningForReachabilityChanges;
- (void)stop;
- (void)start;
- (BOOL)isHostReachable;
- (void)finalize;
- (void)dealloc;
- (id)initWithHostName:(id)arg1 notifyQueue:(struct dispatch_queue_s *)arg2 usingBlock:(id)arg3;

@end

@interface SUAppStoreUpdateController : NSObject
{
    NSArray *_currentUpdates;
    NSURL *_overrideCatalogURL;
    NSArray *_queuedUpdates;
    struct dispatch_queue_s *_q;
    BOOL _requireACPower;
    SUPowerSourceMonitor *_powerMonitor;
    struct dispatch_source_s *_cookieSource;
    struct dispatch_queue_s *_availabilityQ;
    struct dispatch_queue_s *_scanAndSessionQ;
    NSDate *_lastActualScan;
    NSError *_lastCantStartError;
    NSError *_lastScanError;
}

+ (id)_errorWithBlockingLock:(id)arg1;
+ (id)_errorWithCode:(int)arg1 userInfo:(id)arg2 underlyingError:(id)arg3;
+ (id)keyPathsForValuesAffectingIsDownloadRequiredForPostLogoutQueuedUpdates;
+ (id)keyPathsForValuesAffectingApplicationIdentifiersToCloseForQueuedUpdates;
+ (id)keyPathsForValuesAffectingActionRequiredForQueuedUpdates;
+ (id)keyPathsForValuesAffectingCanStartUpdate;
+ (id)sharedUpdateController;
@property BOOL requireACPower; // @synthesize requireACPower=_requireACPower;
- (BOOL)resetIgnoredUpdates;
- (BOOL)hasIgnoredUpdates;
- (BOOL)ignoreUpdate:(id)arg1;
- (void)cancelOperation:(id)arg1;
- (BOOL)installQueuedUpdatesAfterNextLogoutRestartingNow:(BOOL)arg1;
- (id)startDownloadingPostLogoutQueuedUpdatesAndNotifyOn:(struct dispatch_queue_s *)arg1 progress:(id)arg2 finish:(void)arg3;
- (BOOL)isDownloadRequiredForPostLogoutQueuedUpdates;
- (id)startInstallingQueuedUpdatesAndNotifyOn:(struct dispatch_queue_s *)arg1 progress:(id)arg2 finish:(void)arg3;
- (BOOL)_haveValidScanData;
- (id)_startSessionOnQueuedUpdatesWithOptions:(int)arg1 notifyOn:(struct dispatch_queue_s *)arg2 progress:(id)arg3 finish:(void)arg4;
- (id)applicationIdentifiersToCloseForQueuedUpdates;
- (unsigned long long)diskSpaceRequiredForQueuedUpdates;
- (id)_queuedSUProducts;
- (int)actionRequiredForQueuedUpdates;
- (id)queuedUpdates;
- (BOOL)dequeueUpdate:(id)arg1;
- (BOOL)enqueueUpdate:(id)arg1;
- (void)_setQueuedUpdatesAndNotify:(id)arg1;
- (void)_monitorUpdatesCookieOnQueue:(struct dispatch_queue_s *)arg1;
- (void)_registerLocalProducts:(id)arg1;
- (BOOL)isSeedCatalog;
- (int)catalogTrustLevel;
- (id)catalogHostName;
- (id)startScanningForUpdatesIncludingPrerelease:(BOOL)arg1 rampedUnseen:(BOOL)arg2 evenIfUnchanged:(BOOL)arg3 notifyOn:(struct dispatch_queue_s *)arg4 progress:(id)arg5 finish:(void)arg6;
- (id)_startScanningForUpdates:(BOOL)arg1 conditionally:(BOOL)arg2 includingPrerelease:(BOOL)arg3 rampedUnseen:(BOOL)arg4 skipIfNotInitial:(BOOL)arg5 notifyOn:(struct dispatch_queue_s *)arg6 progress:(id)arg7 finish:(void)arg8;
- (BOOL)_wasSoftwareInstalledSinceLastScan;
- (void)_buildCurrentUpdatesFromLocalProducts;
- (id)_shortDescriptionOfUpdates:(id)arg1;
- (void)_setAvailableUpdatesAndNotify:(id)arg1;
- (id)availableUpdates;
- (void)_updateCanStartUpdate:(id)arg1;
- (BOOL)canStartUpdateReturningError:(id *)arg1;
@property(readonly) BOOL canStartUpdate;
- (void)dealloc;
- (id)init;
- (BOOL)installQueuedUpdatesAfterLogout;
- (id)startScanningForUpdatesIncludingPrerelease:(BOOL)arg1 rampedUnseen:(BOOL)arg2 notifyOn:(struct dispatch_queue_s *)arg3 progress:(id)arg4 finish:(void)arg5;
- (id)startScanningForUpdatesIncludingNonRecommended:(BOOL)arg1 notifyOn:(struct dispatch_queue_s *)arg2 progress:(id)arg3 finish:(void)arg4;
- (id)startScanningForUpdatesAndNotifyOn:(struct dispatch_queue_s *)arg1 progress:(id)arg2 finish:(void)arg3;

@end

@interface _SUAppStoreSessionDelegate : NSObject <SUSessionDelegate>
{
    id _b;
    struct dispatch_semaphore_s *_doneSemaphore;
    NSError *_sessionError;
}

- (void)session:(id)arg1 product:(id)arg2 didFailWithError:(id)arg3;
- (void)session:(id)arg1 willEnd:(BOOL)arg2;
- (void)session:(id)arg1 currentStatus:(id)arg2 progress:(float)arg3;
- (void)session:(id)arg1 couldNotAcquireLock:(id)arg2;
- (void)sessionDidBegin:(id)arg1;
- (id)sessionError;
- (void)waitUntilDone;
- (void)finalize;
- (void)dealloc;
- (id)initWithProgressBlock:(id)arg1;

@end

@interface _SUAppStoreControllerCancelHandler : NSObject
{
    id _scanOrSession;
    BOOL _isCancelled;
    struct dispatch_queue_s *_syncQueue;
}

- (void)cancel;
- (void)setScanOrSession:(id)arg1;
- (BOOL)isCancelled;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface SUAppStoreUpdate : NSObject
{
    SUProduct *_product;
    id _iconIfAny;
    NSString *_localization;
    long long _downloadState;
    struct dispatch_queue_s *_q;
}

+ (id)_catalogMetadataKeys;
+ (id)_localizedKeys;
- (void)_setDownloadState:(long long)arg1;
- (long long)_downloadState;
@property(readonly) NSArray *applicationIdentifiersToClose;
@property(readonly) NSURL *customURLForPostInstallNotification;
@property(readonly) NSString *customTextForPostInstallNotification;
@property(readonly) NSString *customTitleForPostInstallNotification;
@property(readonly) BOOL showPostInstallNotification;
@property(readonly) long long autoInstallWithDelayInHours;
@property(readonly) BOOL isCritical;
@property(readonly) BOOL isRamped;
@property(readonly) BOOL isRecommended;
@property(readonly) id auxInfo;
@property(readonly) NSArray *tags;
@property(readonly) NSString *productKey;
@property(readonly) NSAttributedString *firmwareWarning;
@property(readonly) NSAttributedString *licenseAgreement;
@property(readonly) NSString *currentLocalization;
@property(readonly) int action;
@property(readonly) NSImage *icon;
@property(readonly) NSDate *postDate;
@property(readonly) NSAttributedString *longDescription;
@property(readonly) NSString *versionString;
@property(readonly) NSString *title;
- (id)description;
- (void)_setProduct:(id)arg1;
- (id)_product;
- (void)finalize;
- (void)dealloc;
- (id)_initWithProduct:(id)arg1;

@end

@interface _SUAttributedStringWebResourceLoadDelegate : NSObject
{
}

- (id)webView:(id)arg1 resource:(id)arg2 willSendRequest:(id)arg3 redirectResponse:(id)arg4 fromDataSource:(id)arg5;

@end

@interface SUAppStoreNotifier : NSObject <NSUserNotificationCenterDelegate>
{
    NSUserNotificationCenter *_center;
    NSUserNotification *_currentNotification;
}

- (void)userNotificationCenter:(id)arg1 didDeliverNotification:(id)arg2;
- (void)notify;
- (BOOL)shouldNotifyForCurrentUser;
- (void)dealloc;

@end

@interface SUCheckService : NSObject
{
    struct dispatch_queue_s *_queue;
    struct _xpc_connection_s *_connection;
    long long _transactionCount;
    void *_messagesPendingReply;
    long long _initialTrigger;
    struct dispatch_semaphore_s *_triggerSemaphore;
    struct dispatch_semaphore_s *_exitSemaphore;
    BOOL _acknowledgeDidNotify;
}

+ (id)stringFromTriggerType:(long long)arg1;
+ (id)stringFromResult:(long long)arg1;
- (void)disconnect;
- (void)acknowledge:(BOOL)arg1;
- (void)triggerWithType:(long long)arg1 replyOnQueue:(struct dispatch_queue_s *)arg2 toBlock:(id)arg3;
- (void)connectToService;
- (void)_sendResult:(long long)arg1 withParameters:(id)arg2 forMessage:(void *)arg3;
- (BOOL)stopServiceWithResult:(long long)arg1 parameters:(id)arg2;
- (long long)waitForTrigger;
- (void)startService;
- (void)dealloc;
- (id)init;

@end

@interface SUSystemCapabilityMonitor : NSObject
{
    id _notifyBlock;
    struct __IOPMConnection *_pmConnection;
    long long _lastCheckResult;
    unsigned int _lastWakeCapabilities;
    unsigned int _assertionID;
    id _logBlock;
}

+ (BOOL)shouldCheckUnderCurrentConditionsWithInterval:(double)arg1 sinceLastCheck:(id)arg2 forCriticalUpdates:(BOOL)arg3;
+ (BOOL)_isDarkWakeSupportedAndEnabled;
@property(copy) id logBlock; // @synthesize logBlock=_logBlock;
@property long long lastCheckResult; // @synthesize lastCheckResult=_lastCheckResult;
- (void)_log:(id)arg1;
- (void)_handlePMEvent:(unsigned int)arg1 capabilities:(unsigned int)arg2;
- (void)cancelPowerAssertionIfTaken;
- (void)createPowerAssertionIfAppropriate;
- (void)_createPowerAssertionForImmediate:(BOOL)arg1;
- (void)_stopMonitoring;
- (BOOL)_startMonitoringOnQueue:(struct dispatch_queue_s *)arg1;
- (void)monitorOnQueue:(struct dispatch_queue_s *)arg1 notifyingBlock:(id)arg2;
- (void)dealloc;
- (id)init;

@end

@interface SUSharedAuthenticationHandler : NSObject <PKURLAuthenticationHandler>
{
    NSMutableDictionary *_certValidatedByHost;
    struct dispatch_queue_s *_updateQueue;
    BOOL _evCheckingDisabledByPref;
    NSMutableArray *_disabledHosts;
}

+ (id)sharedHandler;
- (void)_setCertValidated:(BOOL)arg1 forHost:(id)arg2;
- (BOOL)certValidatedForURL:(id)arg1;
- (void)promptForAuthenticationChallenge:(id)arg1;
- (BOOL)isHostDiabledForEVCheck:(id)arg1;
- (void)disableHostForEVCheck:(id)arg1;
- (id)init;

@end

@interface SUContentLocator : NSObject
{
    NSData *_lookupResponseData;
    NSError *_error;
    NSMutableDictionary *_prodIDToPackageURLsMap;
    NSMutableDictionary *_packageIDToURLsMap;
    NSArray *_products;
    BOOL _evChecksDisabled;
    BOOL _digestChecksDisabled;
}

+ (id)contentLocatorURL;
+ (void)initialize;
- (id)urlForPackageIdenfier:(id)arg1 forType:(int)arg2;
- (id)packageURLsForProduct:(id)arg1;
- (BOOL)lookupContentLocationWithCatalog:(id)arg1;
- (id)_packageDictionaryForProductKey:(id)arg1 matchingPackageURL:(id)arg2 usingCatalog:(id)arg3;
- (BOOL)_parseLocatorResponse;
- (BOOL)_sendCLRequest:(id)arg1;
- (void)dealloc;
- (id)initWithProducts:(id)arg1;
- (void)_loadCLPrefs;

@end

@interface SUContentLocatorPackageSource : SUPackageSource <PKPackageSource>
{
    NSMutableDictionary *_packageReferencesByProduct;
    SUCatalog *_catalog;
    NSMutableDictionary *_digestByPackageURLPath;
    NSMutableArray *_allProducts;
}

+ (void)handleInstallError:(id)arg1;
+ (void)clearSkipContentLocatorFlag;
+ (BOOL)shouldSkipContentLocator;
+ (void)initialize;
- (id)packageReferencesMatchingIdentifier:(id)arg1 version:(id)arg2;
- (id)allPackageReferences;
- (id)digestForPackageAtURLPath:(id)arg1;
- (id)description;
- (id)descriptionForProduct:(id)arg1;
- (void)dealloc;
- (BOOL)doScanFinishedOps;
- (BOOL)registerProductForContentLocation:(id)arg1 urls:(id)arg2;
- (BOOL)registerProduct:(id)arg1;
- (id)initWithCatalog:(id)arg1;
- (id)_packageDictionaryForProductKey:(id)arg1 matchingPackageURL:(id)arg2;

@end

@interface SUPackageSource : NSObject
{
    BOOL _packageSourceIsValid;
}

@property BOOL packageSourceIsValid; // @synthesize packageSourceIsValid=_packageSourceIsValid;
- (BOOL)doScanFinishedOps;
- (id)digestForPackageAtURLPath:(id)arg1;
- (BOOL)registerProduct:(id)arg1;

@end

@interface PKPackageReference (SUCatalogAdditions)
- (BOOL)_isSamePackageAs:(id)arg1;
@end

@interface NSDictionary (CaseInsensitive)
- (id)objectForCaseInsensitiveKey:(id)arg1;
@end

@interface PKDistribution (SUAdditions)
+ (id)_softwareUpdateDistributionWithData:(id)arg1 error:(id *)arg2;
+ (id)_softwareUpdateDistributionWithContentsOfURL:(id)arg1 error:(id *)arg2;
- (id)auxinfo;
- (id)_softwareUpdateChoice;
- (id)_softwareUpdateInterfaceType;
- (void)_mungeInvisibleChoicesOutline;
@end

@interface PKDistributionController (SUAdditions)
- (void)_selectRootSoftwareUpdateChoice;
@end

@interface NSTask (Timeout)
- (int)_runWithTimeout:(double)arg1;
@end

@interface NSWorkspace (RestartAdditions)
- (BOOL)_shutdown;
- (BOOL)_restart;
- (BOOL)_logout;
- (BOOL)_sendAEToLoginWindow:(unsigned int)arg1;
@end

@interface NSAttributedString (SUAppExtras)
+ (id)_attributedStringWithData:(id)arg1 MIMEType:(id)arg2;
@end

@interface NSRunLoop (SUAdditions)
- (void)_runUntilCondition:(id)arg1 periodicAction:(void)arg2;
- (void)_runUntilCondition:(id)arg1;
@end

@interface PKPackageReference (SUCatalogAdditions)
- (BOOL)_isSamePackageAs:(id)arg1;
@end

